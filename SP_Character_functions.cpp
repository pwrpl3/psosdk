#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SP_Character

#include "Basic.hpp"

#include "SP_Character_classes.hpp"
#include "SP_Character_parameters.hpp"


namespace SDK
{

// Function SP_Character.SP_Character_C.ExecuteUbergraph_SP_Character
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::ExecuteUbergraph_SP_Character(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ExecuteUbergraph_SP_Character");

	Params::SP_Character_C_ExecuteUbergraph_SP_Character Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.RecievePlayerInfo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 Param_SP_Controller                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Param_PlayerSessionId                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Param_PlayerName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Param_Team                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Position                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::RecievePlayerInfo(class ASP_Controller_C* Param_SP_Controller, const class FString& Param_PlayerSessionId, const class FString& Param_PlayerName, int32 Param_Team, int32 Param_Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "RecievePlayerInfo");

	Params::SP_Character_C_RecievePlayerInfo Parms{};

	Parms.Param_SP_Controller = Param_SP_Controller;
	Parms.Param_PlayerSessionId = std::move(Param_PlayerSessionId);
	Parms.Param_PlayerName = std::move(Param_PlayerName);
	Parms.Param_Team = Param_Team;
	Parms.Param_Position = Param_Position;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.BndEvt__SP_Character_Mesh_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASP_Character_C::BndEvt__SP_Character_Mesh_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BndEvt__SP_Character_Mesh_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");

	Params::SP_Character_C_BndEvt__SP_Character_Mesh_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.CapsuleHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::CapsuleHit(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "CapsuleHit");

	Params::SP_Character_C_CapsuleHit Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.BodyCollisionOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Other_Actor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::BodyCollisionOverlap(class AActor* Other_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BodyCollisionOverlap");

	Params::SP_Character_C_BodyCollisionOverlap Parms{};

	Parms.Other_Actor = Other_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.PlayBodyHitSound
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::PlayBodyHitSound(float Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "PlayBodyHitSound");

	Params::SP_Character_C_PlayBodyHitSound Parms{};

	Parms.Velocity = Velocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.PlayBodyHitSound_All
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   VolumeMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::PlayBodyHitSound_All(const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "PlayBodyHitSound_All");

	Params::SP_Character_C_PlayBodyHitSound_All Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.VolumeMultiplier = VolumeMultiplier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.CheckJumpExit
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::CheckJumpExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "CheckJumpExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASP_Character_C::BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");

	Params::SP_Character_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_SP_Controller_Server
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 Param_SP_Controller                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_SP_Controller_Server(class ASP_Controller_C* Param_SP_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_SP_Controller_Server");

	Params::SP_Character_C_Set_SP_Controller_Server Parms{};

	Parms.Param_SP_Controller = Param_SP_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_SP_Controller_Client
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 Param_SP_Controller                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_SP_Controller_Client(class ASP_Controller_C* Param_SP_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_SP_Controller_Client");

	Params::SP_Character_C_Set_SP_Controller_Client Parms{};

	Parms.Param_SP_Controller = Param_SP_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.DestroySelf
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::DestroySelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "DestroySelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.ReceiveUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ReceiveUnpossessed");

	Params::SP_Character_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.LeftFootstep
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::LeftFootstep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "LeftFootstep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.PlayFootstepSound_All
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   VolumeMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::PlayFootstepSound_All(const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "PlayFootstepSound_All");

	Params::SP_Character_C_PlayFootstepSound_All Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.VolumeMultiplier = VolumeMultiplier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.RightFootstep
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::RightFootstep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "RightFootstep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Recieve_UserSettings
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   OnestPersonFOV                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ThreerdPersonFOV                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ThreerdPersonDistance                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ThreerdPersonHeight                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Recieve_UserSettings(float OnestPersonFOV, float ThreerdPersonFOV, float ThreerdPersonDistance, float ThreerdPersonHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Recieve_UserSettings");

	Params::SP_Character_C_Recieve_UserSettings Parms{};

	Parms.OnestPersonFOV = OnestPersonFOV;
	Parms.ThreerdPersonFOV = ThreerdPersonFOV;
	Parms.ThreerdPersonDistance = ThreerdPersonDistance;
	Parms.ThreerdPersonHeight = ThreerdPersonHeight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ReceiveTick");

	Params::SP_Character_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ASP_Character_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.ResetCapsule
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::ResetCapsule()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ResetCapsule");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.SetFeetHitboxesScale_02
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::SetFeetHitboxesScale_02()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SetFeetHitboxesScale_02");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.SetFeetHitboxesScale_01
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::SetFeetHitboxesScale_01()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SetFeetHitboxesScale_01");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.CheckSprinting
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::CheckSprinting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "CheckSprinting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveButtonPressed
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::GkDiveButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveButtonPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.SprintTick
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::SprintTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SprintTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.SubtractAbilityStamina
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::SubtractAbilityStamina()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SubtractAbilityStamina");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.ResetStaminaClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::ResetStaminaClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ResetStaminaClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.JumpPressed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GkDiveButton                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AnimHorizontal                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AnimVertical                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::JumpPressed(int32 GkDiveButton, float Param_AnimHorizontal, float Param_AnimVertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "JumpPressed");

	Params::SP_Character_C_JumpPressed Parms{};

	Parms.GkDiveButton = GkDiveButton;
	Parms.Param_AnimHorizontal = Param_AnimHorizontal;
	Parms.Param_AnimVertical = Param_AnimVertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.SprintButtonReleased
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::SprintButtonReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SprintButtonReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.SprintButtonPressed
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::SprintButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SprintButtonPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.StaminaTick
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::StaminaTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "StaminaTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.CheckFoul
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::CheckFoul(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "CheckFoul");

	Params::SP_Character_C_CheckFoul Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.ClampCamera
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::ClampCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ClampCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Enable3rdPersonCamera
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::Enable3rdPersonCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Enable3rdPersonCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Distance
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TP_Distance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TP_Height                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Distance(float TP_Distance, float TP_Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Distance");

	Params::SP_Character_C_Distance Parms{};

	Parms.TP_Distance = TP_Distance;
	Parms.TP_Height = TP_Height;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set3rdPersonFOV
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set3rdPersonFOV(float FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set3rdPersonFOV");

	Params::SP_Character_C_Set3rdPersonFOV Parms{};

	Parms.FOV = FOV;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set1stPersonFOV
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set1stPersonFOV(float FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set1stPersonFOV");

	Params::SP_Character_C_Set1stPersonFOV Parms{};

	Parms.FOV = FOV;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Enable1stPersonCamera
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::Enable1stPersonCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Enable1stPersonCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.ToggleCamera
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::ToggleCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ToggleCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.PlaySlideTackleSound
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::PlaySlideTackleSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "PlaySlideTackleSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.BicycleKickKick
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::BicycleKickKick(class ASoccerBall_C* Param_SoccerBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BicycleKickKick");

	Params::SP_Character_C_BicycleKickKick Parms{};

	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.SlideTackleKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::SlideTackleKick(class ASoccerBall_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SlideTackleKick");

	Params::SP_Character_C_SlideTackleKick Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.BndEvt__FootHitbox_R_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASP_Character_C::BndEvt__FootHitbox_R_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BndEvt__FootHitbox_R_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");

	Params::SP_Character_C_BndEvt__FootHitbox_R_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.BndEvt__FootHitbox_L_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASP_Character_C::BndEvt__FootHitbox_L_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BndEvt__FootHitbox_L_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::SP_Character_C_BndEvt__FootHitbox_L_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Add_Movement_Input
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaleValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Add_Movement_Input(const struct FVector& WorldDirection, float ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Add_Movement_Input");

	Params::SP_Character_C_Add_Movement_Input Parms{};

	Parms.WorldDirection = std::move(WorldDirection);
	Parms.ScaleValue = ScaleValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.EnterJump
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::EnterJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "EnterJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Set_InputEnabled
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_InputEnabled                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Character_C::Set_InputEnabled(bool Param_InputEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_InputEnabled");

	Params::SP_Character_C_Set_InputEnabled Parms{};

	Parms.Param_InputEnabled = Param_InputEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_AbilityActive
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_AbilityActive                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Character_C::Set_AbilityActive(bool Param_AbilityActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_AbilityActive");

	Params::SP_Character_C_Set_AbilityActive Parms{};

	Parms.Param_AbilityActive = Param_AbilityActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_MovementState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_MovementState                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_MovementState(int32 Param_MovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_MovementState");

	Params::SP_Character_C_Set_MovementState Parms{};

	Parms.Param_MovementState = Param_MovementState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_AbilityState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_AbilityState                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_AbilityState(int32 Param_AbilityState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_AbilityState");

	Params::SP_Character_C_Set_AbilityState Parms{};

	Parms.Param_AbilityState = Param_AbilityState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.EnterTrip
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::EnterTrip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "EnterTrip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.EnterBicycleKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_AnimHorizontal                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::EnterBicycleKick(float Param_AnimHorizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "EnterBicycleKick");

	Params::SP_Character_C_EnterBicycleKick Parms{};

	Parms.Param_AnimHorizontal = Param_AnimHorizontal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.ExitAbility
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::ExitAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ExitAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.SlideTackleMovement
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_AnimHorizontal                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::SlideTackleMovement(float Param_AnimHorizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SlideTackleMovement");

	Params::SP_Character_C_SlideTackleMovement Parms{};

	Parms.Param_AnimHorizontal = Param_AnimHorizontal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.EnterSlideTackle
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_AnimHorizontal                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::EnterSlideTackle(float Param_AnimHorizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "EnterSlideTackle");

	Params::SP_Character_C_EnterSlideTackle Parms{};

	Parms.Param_AnimHorizontal = Param_AnimHorizontal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.SlideTacklePressed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GkDiveButton                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HorizontalMovement                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VerticalMovement                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::SlideTacklePressed(int32 GkDiveButton, float HorizontalMovement, float VerticalMovement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SlideTacklePressed");

	Params::SP_Character_C_SlideTacklePressed Parms{};

	Parms.GkDiveButton = GkDiveButton;
	Parms.HorizontalMovement = HorizontalMovement;
	Parms.VerticalMovement = VerticalMovement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_AimHorizontal
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_AimHorizontal                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_AimHorizontal(float Param_AimHorizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_AimHorizontal");

	Params::SP_Character_C_Set_AimHorizontal Parms{};

	Parms.Param_AimHorizontal = Param_AimHorizontal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_AimVertical
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_AimVertical                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_AimVertical(float Param_AimVertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_AimVertical");

	Params::SP_Character_C_Set_AimVertical Parms{};

	Parms.Param_AimVertical = Param_AimVertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_AnimVertical
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimForward                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_AnimVertical(float AnimForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_AnimVertical");

	Params::SP_Character_C_Set_AnimVertical Parms{};

	Parms.AnimForward = AnimForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_AnimHorizontal
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_AnimHorizontal                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_AnimHorizontal(float Param_AnimHorizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_AnimHorizontal");

	Params::SP_Character_C_Set_AnimHorizontal Parms{};

	Parms.Param_AnimHorizontal = Param_AnimHorizontal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.VerticalAim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_VerticalAim                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::VerticalAim(float Param_VerticalAim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "VerticalAim");

	Params::SP_Character_C_VerticalAim Parms{};

	Parms.Param_VerticalAim = Param_VerticalAim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.HorizontalAim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_HorizontalAim                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::HorizontalAim(float Param_HorizontalAim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "HorizontalAim");

	Params::SP_Character_C_HorizontalAim Parms{};

	Parms.Param_HorizontalAim = Param_HorizontalAim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.PlayerMovement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   VerticalValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HorizontalValue                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASP_Controller_C*                 Param_SP_Controller                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::PlayerMovement(float VerticalValue, float HorizontalValue, class ASP_Controller_C* Param_SP_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "PlayerMovement");

	Params::SP_Character_C_PlayerMovement Parms{};

	Parms.VerticalValue = VerticalValue;
	Parms.HorizontalValue = HorizontalValue;
	Parms.Param_SP_Controller = Param_SP_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.EnterRun
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterMovementComponent*      CharacterMovementComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::EnterRun(class UCharacterMovementComponent* CharacterMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "EnterRun");

	Params::SP_Character_C_EnterRun Parms{};

	Parms.CharacterMovementComponent = CharacterMovementComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.EnterSprint
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterMovementComponent*      CharacterMovementComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::EnterSprint(class UCharacterMovementComponent* CharacterMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "EnterSprint");

	Params::SP_Character_C_EnterSprint Parms{};

	Parms.CharacterMovementComponent = CharacterMovementComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.StartTouchSlowDown
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::StartTouchSlowDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "StartTouchSlowDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.DestroyPersonalBall
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::DestroyPersonalBall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "DestroyPersonalBall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.SpawnBall
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::SpawnBall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SpawnBall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.CheckSpawnBall
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::CheckSpawnBall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "CheckSpawnBall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Start_KickChargeHold
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_HoldingChargeKickType                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_HoldingChargePower                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_HoldingChargeHeightSensitivity                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_HoldingChargeCurveSensitivity                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_HoldingChargeVerticalAim                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_HoldingChargeHorizontalAim                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Start_KickChargeHold(int32 Param_HoldingChargeKickType, float Param_HoldingChargePower, float Param_HoldingChargeHeightSensitivity, float Param_HoldingChargeCurveSensitivity, float Param_HoldingChargeVerticalAim, float Param_HoldingChargeHorizontalAim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Start_KickChargeHold");

	Params::SP_Character_C_Start_KickChargeHold Parms{};

	Parms.Param_HoldingChargeKickType = Param_HoldingChargeKickType;
	Parms.Param_HoldingChargePower = Param_HoldingChargePower;
	Parms.Param_HoldingChargeHeightSensitivity = Param_HoldingChargeHeightSensitivity;
	Parms.Param_HoldingChargeCurveSensitivity = Param_HoldingChargeCurveSensitivity;
	Parms.Param_HoldingChargeVerticalAim = Param_HoldingChargeVerticalAim;
	Parms.Param_HoldingChargeHorizontalAim = Param_HoldingChargeHorizontalAim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.StartKickCoolDown
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::StartKickCoolDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "StartKickCoolDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.ExitKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::ExitKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ExitKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Set_KickState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_KickState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_KickState(int32 Param_KickState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_KickState");

	Params::SP_Character_C_Set_KickState Parms{};

	Parms.Param_KickState = Param_KickState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.FootHitbox_Overlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::FootHitbox_Overlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "FootHitbox_Overlap");

	Params::SP_Character_C_FootHitbox_Overlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_SoccerBallServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_SoccerBallServer(class ASoccerBall_C* Param_SoccerBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_SoccerBallServer");

	Params::SP_Character_C_Set_SoccerBallServer Parms{};

	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_SoccerBallClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_SoccerBallClient(class ASoccerBall_C* Param_SoccerBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_SoccerBallClient");

	Params::SP_Character_C_Set_SoccerBallClient Parms{};

	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.BndEvt__FootHitbox_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::BndEvt__FootHitbox_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BndEvt__FootHitbox_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature");

	Params::SP_Character_C_BndEvt__FootHitbox_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.BndEvt__FootHitbox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASP_Character_C::BndEvt__FootHitbox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BndEvt__FootHitbox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");

	Params::SP_Character_C_BndEvt__FootHitbox_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Kick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   KickType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   KickPower                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HeightSens                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurveSens                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Movement                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Movement_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Kick(int32 KickType, float KickPower, float HeightSens, float CurveSens, float Movement, float Movement_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Kick");

	Params::SP_Character_C_Kick Parms{};

	Parms.KickType = KickType;
	Parms.KickPower = KickPower;
	Parms.HeightSens = HeightSens;
	Parms.CurveSens = CurveSens;
	Parms.Movement = Movement;
	Parms.Movement_0 = Movement_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.PerryCoolDown
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::Func_PerryCoolDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "PerryCoolDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.StartGkDiveHitboxAnim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DiveDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::StartGkDiveHitboxAnim(int32 DiveDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "StartGkDiveHitboxAnim");

	Params::SP_Character_C_StartGkDiveHitboxAnim Parms{};

	Parms.DiveDirection = DiveDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_AuxVariables
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_AuxHorizontal                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AuxVertical                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_AuxVariables(float Param_AuxHorizontal, float Param_AuxVertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_AuxVariables");

	Params::SP_Character_C_Set_AuxVariables Parms{};

	Parms.Param_AuxHorizontal = Param_AuxHorizontal;
	Parms.Param_AuxVertical = Param_AuxVertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Gk_PerryImpulse
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASP_Character_C*                  SP_Character                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Gk_PerryImpulse(class ASoccerBall_C* Param_SoccerBall, class ASP_Character_C* SP_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Gk_PerryImpulse");

	Params::SP_Character_C_Gk_PerryImpulse Parms{};

	Parms.Param_SoccerBall = Param_SoccerBall;
	Parms.SP_Character = SP_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.GkEnterPerry
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_AuxHorizontal                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AuxVertical                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASP_Character_C*                  SP_Character                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::GkEnterPerry(float Param_AuxHorizontal, float Param_AuxVertical, class ASoccerBall_C* Param_SoccerBall, class ASP_Character_C* SP_Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkEnterPerry");

	Params::SP_Character_C_GkEnterPerry Parms{};

	Parms.Param_AuxHorizontal = Param_AuxHorizontal;
	Parms.Param_AuxVertical = Param_AuxVertical;
	Parms.Param_SoccerBall = Param_SoccerBall;
	Parms.SP_Character = SP_Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.StopGkDiveMovement
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::StopGkDiveMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "StopGkDiveMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.ExitThrowInPickup
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::ExitThrowInPickup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ExitThrowInPickup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.ThrowInPickupBall
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::ThrowInPickupBall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ThrowInPickupBall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.IgnoreThrowInShield
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Param_CapsuleComponent                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::IgnoreThrowInShield(class UPrimitiveComponent* Param_CapsuleComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "IgnoreThrowInShield");

	Params::SP_Character_C_IgnoreThrowInShield Parms{};

	Parms.Param_CapsuleComponent = Param_CapsuleComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.BlockThrowInShield
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Param_CapsuleComponent                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::BlockThrowInShield(class UPrimitiveComponent* Param_CapsuleComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BlockThrowInShield");

	Params::SP_Character_C_BlockThrowInShield Parms{};

	Parms.Param_CapsuleComponent = Param_CapsuleComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.CheckCrowdRoar
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::CheckCrowdRoar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "CheckCrowdRoar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Gk_StopMovement
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMovementComponent*               Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Gk_StopMovement(class UMovementComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Gk_StopMovement");

	Params::SP_Character_C_Gk_StopMovement Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.EnableBallCollision
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::EnableBallCollision(class UPrimitiveComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "EnableBallCollision");

	Params::SP_Character_C_EnableBallCollision Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.DisableBallCollision
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::DisableBallCollision(class UPrimitiveComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "DisableBallCollision");

	Params::SP_Character_C_DisableBallCollision Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.GkExitCatchServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterMovementComponent*      CharacterMovementComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::GkExitCatchServer(class UCharacterMovementComponent* CharacterMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkExitCatchServer");

	Params::SP_Character_C_GkExitCatchServer Parms{};

	Parms.CharacterMovementComponent = CharacterMovementComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Gk_EnterDive
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_AnimHorizontal                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AnimVertical                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Gk_EnterDive(float Param_AnimHorizontal, float Param_AnimVertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Gk_EnterDive");

	Params::SP_Character_C_Gk_EnterDive Parms{};

	Parms.Param_AnimHorizontal = Param_AnimHorizontal;
	Parms.Param_AnimVertical = Param_AnimVertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Gk_ExitRelease
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::Gk_ExitRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Gk_ExitRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Impulse
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Impulse(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Impulse");

	Params::SP_Character_C_Impulse Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.BndEvt__GkHitBox1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASP_Character_C::BndEvt__GkHitBox1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BndEvt__GkHitBox1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");

	Params::SP_Character_C_BndEvt__GkHitBox1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Gk_ExitDive_Server
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterMovementComponent*      CharacterMovementComponent                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Gk_ExitDive_Server(class UCharacterMovementComponent* CharacterMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Gk_ExitDive_Server");

	Params::SP_Character_C_Gk_ExitDive_Server Parms{};

	Parms.CharacterMovementComponent = CharacterMovementComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Dive
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Dive                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Character_C::Func_Dive_0(bool Param_Dive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Dive");

	Params::SP_Character_C_Dive Parms{};

	Parms.Param_Dive = Param_Dive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.EnterThrowInPickup
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::EnterThrowInPickup(class ASoccerBall_C* Param_SoccerBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "EnterThrowInPickup");

	Params::SP_Character_C_EnterThrowInPickup Parms{};

	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_GkState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_GkState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_GkState(int32 Param_GkState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_GkState");

	Params::SP_Character_C_Set_GkState Parms{};

	Parms.Param_GkState = Param_GkState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.GkEnterCatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Character_C*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AuxHorizontal                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AuxVertical                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::GkEnterCatch(class ASP_Character_C* Character, class ASoccerBall_C* Param_SoccerBall, float Param_AuxHorizontal, float Param_AuxVertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkEnterCatch");

	Params::SP_Character_C_GkEnterCatch Parms{};

	Parms.Character = Character;
	Parms.Param_SoccerBall = Param_SoccerBall;
	Parms.Param_AuxHorizontal = Param_AuxHorizontal;
	Parms.Param_AuxVertical = Param_AuxVertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.GkExitCatch
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::GkExitCatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkExitCatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Perry
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Perry(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Perry");

	Params::SP_Character_C_Perry Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Gk_ExitDive_Client
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::Gk_ExitDive_Client()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Gk_ExitDive_Client");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GK_DiveMovement
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Anim_Horizontal                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::GK_DiveMovement(float Anim_Horizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GK_DiveMovement");

	Params::SP_Character_C_GK_DiveMovement Parms{};

	Parms.Anim_Horizontal = Anim_Horizontal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_PenaltyState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_PenaltyState                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_PenaltyState(int32 Param_PenaltyState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_PenaltyState");

	Params::SP_Character_C_Set_PenaltyState Parms{};

	Parms.Param_PenaltyState = Param_PenaltyState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.StartDropKickMovement
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::StartDropKickMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "StartDropKickMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Gk_Release
// (BlueprintCallable, BlueprintEvent)

void ASP_Character_C::Gk_Release()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Gk_Release");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Gk_EnterRelease
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_ReleasePower                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Gk_State                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Gk_EnterRelease(float Param_ReleasePower, int32 Gk_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Gk_EnterRelease");

	Params::SP_Character_C_Gk_EnterRelease Parms{};

	Parms.Param_ReleasePower = Param_ReleasePower;
	Parms.Gk_State = Gk_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_Gk_Ball_Client
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_Gk_Ball_Client(class ASoccerBall_C* Param_SoccerBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_Gk_Ball_Client");

	Params::SP_Character_C_Set_Gk_Ball_Client Parms{};

	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_Gk_Ball_Server
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_Gk_Ball_Server(class ASoccerBall_C* Param_SoccerBall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_Gk_Ball_Server");

	Params::SP_Character_C_Set_Gk_Ball_Server Parms{};

	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.BndEvt__GkHitBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASP_Character_C::BndEvt__GkHitBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "BndEvt__GkHitBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::SP_Character_C_BndEvt__GkHitBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_GkButtonPressed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_GkButtonPressed                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Character_C::Set_GkButtonPressed(bool Param_GkButtonPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_GkButtonPressed");

	Params::SP_Character_C_Set_GkButtonPressed Parms{};

	Parms.Param_GkButtonPressed = Param_GkButtonPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.UpdateShoesAppearance
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ShoeStyle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::UpdateShoesAppearance(int32 ShoeStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UpdateShoesAppearance");

	Params::SP_Character_C_UpdateShoesAppearance Parms{};

	Parms.ShoeStyle = ShoeStyle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.UpdateSocksAppearance
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SocksStyle                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BodySize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShoeStyle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SocksPattern                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::UpdateSocksAppearance(const int32& SocksStyle, int32 BodySize, int32 ShoeStyle, const int32& SocksPattern, const struct FLinearColor& Color1, const struct FLinearColor& Color2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UpdateSocksAppearance");

	Params::SP_Character_C_UpdateSocksAppearance Parms{};

	Parms.SocksStyle = SocksStyle;
	Parms.BodySize = BodySize;
	Parms.ShoeStyle = ShoeStyle;
	Parms.SocksPattern = SocksPattern;
	Parms.Color1 = std::move(Color1);
	Parms.Color2 = std::move(Color2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.UpdateShortsAppearance
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ShortsStyle                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BodySize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SkinTone                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShortsPattern                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::UpdateShortsAppearance(const int32& ShortsStyle, int32 BodySize, float SkinTone, const int32& ShortsPattern, const struct FLinearColor& Color1, const struct FLinearColor& Color2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UpdateShortsAppearance");

	Params::SP_Character_C_UpdateShortsAppearance Parms{};

	Parms.ShortsStyle = ShortsStyle;
	Parms.BodySize = BodySize;
	Parms.SkinTone = SkinTone;
	Parms.ShortsPattern = ShortsPattern;
	Parms.Color1 = std::move(Color1);
	Parms.Color2 = std::move(Color2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.UpdateHeadAppearance
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HeadType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BodySize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SkinTone                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EyeColor                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HairStyle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     HairColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FacialHairStyle                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     FacialHairColor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::UpdateHeadAppearance(int32 HeadType, int32 BodySize, float SkinTone, const int32& EyeColor, int32 HairStyle, const struct FLinearColor& HairColor, int32 FacialHairStyle, const struct FLinearColor& FacialHairColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UpdateHeadAppearance");

	Params::SP_Character_C_UpdateHeadAppearance Parms{};

	Parms.HeadType = HeadType;
	Parms.BodySize = BodySize;
	Parms.SkinTone = SkinTone;
	Parms.EyeColor = EyeColor;
	Parms.HairStyle = HairStyle;
	Parms.HairColor = std::move(HairColor);
	Parms.FacialHairStyle = FacialHairStyle;
	Parms.FacialHairColor = std::move(FacialHairColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.RecieveSP_PlayerAppearance
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSP_PlayerAppearance             Param_SP_PlayerAppearance                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Character_C::RecieveSP_PlayerAppearance(const struct FSP_PlayerAppearance& Param_SP_PlayerAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "RecieveSP_PlayerAppearance");

	Params::SP_Character_C_RecieveSP_PlayerAppearance Parms{};

	Parms.Param_SP_PlayerAppearance = std::move(Param_SP_PlayerAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.RecieveSP_TeamAppearance
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSP_TeamAppearance               Param_SP_TeamAppearance                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Character_C::RecieveSP_TeamAppearance(const struct FSP_TeamAppearance& Param_SP_TeamAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "RecieveSP_TeamAppearance");

	Params::SP_Character_C_RecieveSP_TeamAppearance Parms{};

	Parms.Param_SP_TeamAppearance = std::move(Param_SP_TeamAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.ApplySP_Appearance
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::ApplySP_Appearance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "ApplySP_Appearance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.RecieveSP_AppearanceCombined
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSP_PlayerAppearance             Param_SP_PlayerAppearance                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FSP_TeamAppearance               Param_SP_TeamAppearance                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASP_Character_C::RecieveSP_AppearanceCombined(const struct FSP_PlayerAppearance& Param_SP_PlayerAppearance, const struct FSP_TeamAppearance& Param_SP_TeamAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "RecieveSP_AppearanceCombined");

	Params::SP_Character_C_RecieveSP_AppearanceCombined Parms{};

	Parms.Param_SP_PlayerAppearance = std::move(Param_SP_PlayerAppearance);
	Parms.Param_SP_TeamAppearance = std::move(Param_SP_TeamAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.UpdateShirtAppearance
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ShirtStyle                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShirtTuckedIn_                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   BodySize                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SkinTone                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShirtPattern                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     ShirtColor1                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     ShirtColor2                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Param_PlayerName                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             PlayerNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   ShirtFontStyle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSlateColor                      ShirtFontColor                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   ShirtFontFrontNumber                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::UpdateShirtAppearance(int32 ShirtStyle, bool ShirtTuckedIn_, int32 BodySize, float SkinTone, const int32& ShirtPattern, const struct FLinearColor& ShirtColor1, const struct FLinearColor& ShirtColor2, const class FText& Param_PlayerName, const class FText& PlayerNumber, int32 ShirtFontStyle, const struct FSlateColor& ShirtFontColor, int32 ShirtFontFrontNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UpdateShirtAppearance");

	Params::SP_Character_C_UpdateShirtAppearance Parms{};

	Parms.ShirtStyle = ShirtStyle;
	Parms.ShirtTuckedIn_ = ShirtTuckedIn_;
	Parms.BodySize = BodySize;
	Parms.SkinTone = SkinTone;
	Parms.ShirtPattern = ShirtPattern;
	Parms.ShirtColor1 = std::move(ShirtColor1);
	Parms.ShirtColor2 = std::move(ShirtColor2);
	Parms.Param_PlayerName = std::move(Param_PlayerName);
	Parms.PlayerNumber = std::move(PlayerNumber);
	Parms.ShirtFontStyle = ShirtFontStyle;
	Parms.ShirtFontColor = std::move(ShirtFontColor);
	Parms.ShirtFontFrontNumber = ShirtFontFrontNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.SetNameTag
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_PlayerName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASP_Character_C::SetNameTag(const class FString& Param_PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SetNameTag");

	Params::SP_Character_C_SetNameTag Parms{};

	Parms.Param_PlayerName = std::move(Param_PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.EnterSlideEmote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_EmoteState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::EnterSlideEmote(int32 Param_EmoteState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "EnterSlideEmote");

	Params::SP_Character_C_EnterSlideEmote Parms{};

	Parms.Param_EmoteState = Param_EmoteState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Exit_Emote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::Exit_Emote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Exit_Emote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Set_EmoteState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_EmoteState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_EmoteState(int32 Param_EmoteState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_EmoteState");

	Params::SP_Character_C_Set_EmoteState Parms{};

	Parms.Param_EmoteState = Param_EmoteState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.UpdateWristbandsAppearance
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Wristbands                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::UpdateWristbandsAppearance(int32 Param_Wristbands, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UpdateWristbandsAppearance");

	Params::SP_Character_C_UpdateWristbandsAppearance Parms{};

	Parms.Param_Wristbands = Param_Wristbands;
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.UpdateGlovesAppearance
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Position                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Gloves                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::UpdateGlovesAppearance(int32 Param_Position, int32 Param_Gloves, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UpdateGlovesAppearance");

	Params::SP_Character_C_UpdateGlovesAppearance Parms{};

	Parms.Param_Position = Param_Position;
	Parms.Param_Gloves = Param_Gloves;
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.UpdateFacialHairAppearance
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FacialHairStyle                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     FacialHairColor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::UpdateFacialHairAppearance(int32 FacialHairStyle, const struct FLinearColor& FacialHairColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UpdateFacialHairAppearance");

	Params::SP_Character_C_UpdateFacialHairAppearance Parms{};

	Parms.FacialHairStyle = FacialHairStyle;
	Parms.FacialHairColor = std::move(FacialHairColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.UpdateHairAppearance
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HairStyle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     HairColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::UpdateHairAppearance(int32 HairStyle, const struct FLinearColor& HairColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UpdateHairAppearance");

	Params::SP_Character_C_UpdateHairAppearance Parms{};

	Parms.HairStyle = HairStyle;
	Parms.HairColor = std::move(HairColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Set_SkinTone
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SkinTone                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Set_SkinTone(float SkinTone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Set_SkinTone");

	Params::SP_Character_C_Set_SkinTone Parms{};

	Parms.SkinTone = SkinTone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.SetTeamCollision
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::SetTeamCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SetTeamCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.SlideTackleTimeline__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::SlideTackleTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SlideTackleTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.SlideTackleTimeline__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::SlideTackleTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "SlideTackleTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimTC__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimTC__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimTC__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimTC__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimTC__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimTC__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimBL__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimBL__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimBL__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimBL__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimBL__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimBL__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimBR__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimBR__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimBR__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimBR__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimBR__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimBR__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimMR__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimMR__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimMR__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimMR__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimMR__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimMR__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimML__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimML__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimML__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimML__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimML__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimML__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimTR__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimTR__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimTR__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimTR__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimTR__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimTR__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimTL__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimTL__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimTL__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveHitboxAnimTL__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveHitboxAnimTL__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveHitboxAnimTL__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveMoment__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveMoment__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveMoment__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.GkDiveMoment__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::GkDiveMoment__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "GkDiveMoment__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.DropKickMovementTimeline__UpdateFunc
// (BlueprintEvent)

void ASP_Character_C::DropKickMovementTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "DropKickMovementTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.DropKickMovementTimeline__FinishedFunc
// (BlueprintEvent)

void ASP_Character_C::DropKickMovementTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "DropKickMovementTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Calculate_MovementMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   MovementMultiplier                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_MovementMultiplier(float* MovementMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_MovementMultiplier");

	Params::SP_Character_C_Calculate_MovementMultiplier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMultiplier != nullptr)
		*MovementMultiplier = Parms.MovementMultiplier;
}


// Function SP_Character.SP_Character_C.Calculate_TurnDeceleration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   HorizontalAim                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_TurnDecelMultiplier                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_TurnDeceleration(float HorizontalAim, float* Param_TurnDecelMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_TurnDeceleration");

	Params::SP_Character_C_Calculate_TurnDeceleration Parms{};

	Parms.HorizontalAim = HorizontalAim;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_TurnDecelMultiplier != nullptr)
		*Param_TurnDecelMultiplier = Parms.Param_TurnDecelMultiplier;
}


// Function SP_Character.SP_Character_C.Calculate_KickAnimation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   KickPower                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_KickAnimation(float KickPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_KickAnimation");

	Params::SP_Character_C_Calculate_KickAnimation Parms{};

	Parms.KickPower = KickPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SP_Character.SP_Character_C.Calculate_DribbleAnimation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASP_Character_C::Calculate_DribbleAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_DribbleAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SP_Character.SP_Character_C.Calculate_KickImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   KickPower                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HeightSensitivity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurveSens                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   VerticalAim                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HorizontalAim                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Kick                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Curve                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_KickImpulse(float KickPower, float HeightSensitivity, float CurveSens, float VerticalAim, float HorizontalAim, class AActor* Param_SoccerBall, struct FVector* Kick, struct FVector* Curve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_KickImpulse");

	Params::SP_Character_C_Calculate_KickImpulse Parms{};

	Parms.KickPower = KickPower;
	Parms.HeightSensitivity = HeightSensitivity;
	Parms.CurveSens = CurveSens;
	Parms.VerticalAim = VerticalAim;
	Parms.HorizontalAim = HorizontalAim;
	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);

	if (Kick != nullptr)
		*Kick = std::move(Parms.Kick);

	if (Curve != nullptr)
		*Curve = std::move(Parms.Curve);
}


// Function SP_Character.SP_Character_C.Calculate_DribbleImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   KickPower                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ForwardMovement                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HorizontalMovement                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Dribble                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_DribbleImpulse(float KickPower, float ForwardMovement, float HorizontalMovement, class AActor* Param_SoccerBall, struct FVector* Dribble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_DribbleImpulse");

	Params::SP_Character_C_Calculate_DribbleImpulse Parms{};

	Parms.KickPower = KickPower;
	Parms.ForwardMovement = ForwardMovement;
	Parms.HorizontalMovement = HorizontalMovement;
	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);

	if (Dribble != nullptr)
		*Dribble = std::move(Parms.Dribble);
}


// Function SP_Character.SP_Character_C.Calculate_JuggleImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   KickPower                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ForwardMovement                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HorizontalMovement                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Dribble                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_JuggleImpulse(float KickPower, float ForwardMovement, float HorizontalMovement, class AActor* Param_SoccerBall, struct FVector* Dribble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_JuggleImpulse");

	Params::SP_Character_C_Calculate_JuggleImpulse Parms{};

	Parms.KickPower = KickPower;
	Parms.ForwardMovement = ForwardMovement;
	Parms.HorizontalMovement = HorizontalMovement;
	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);

	if (Dribble != nullptr)
		*Dribble = std::move(Parms.Dribble);
}


// Function SP_Character.SP_Character_C.Calculate_SlideTackleKickImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HorizontalMovement                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Kick                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_SlideTackleKickImpulse(float HorizontalMovement, class AActor* Param_SoccerBall, struct FVector* Kick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_SlideTackleKickImpulse");

	Params::SP_Character_C_Calculate_SlideTackleKickImpulse Parms{};

	Parms.HorizontalMovement = HorizontalMovement;
	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);

	if (Kick != nullptr)
		*Kick = std::move(Parms.Kick);
}


// Function SP_Character.SP_Character_C.Calculate_BicycleKickImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HorizontalMovement                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Kick                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_BicycleKickImpulse(float HorizontalMovement, class AActor* Param_SoccerBall, struct FVector* Kick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_BicycleKickImpulse");

	Params::SP_Character_C_Calculate_BicycleKickImpulse Parms{};

	Parms.HorizontalMovement = HorizontalMovement;
	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);

	if (Kick != nullptr)
		*Kick = std::move(Parms.Kick);
}


// Function SP_Character.SP_Character_C.Dive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_InputEnabled                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Param_Position                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Team                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_PenaltyState                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_GkState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_Dive                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASP_Character_C::Func_Dive(bool Param_InputEnabled, int32 Param_Position, int32 Param_Team, int32 Param_PenaltyState, int32 Param_GkState, bool* Param_Dive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Dive");

	Params::SP_Character_C_Dive Parms{};

	Parms.Param_InputEnabled = Param_InputEnabled;
	Parms.Param_Position = Param_Position;
	Parms.Param_Team = Param_Team;
	Parms.Param_PenaltyState = Param_PenaltyState;
	Parms.Param_GkState = Param_GkState;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Dive != nullptr)
		*Param_Dive = Parms.Param_Dive;
}


// Function SP_Character.SP_Character_C.Calculate_GkCatchAnimation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Character_C*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AnimHorizontal                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_AnimVertical                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_GkCatchAnimation(class ASP_Character_C* Character, class ASoccerBall_C* Param_SoccerBall, float* Param_AnimHorizontal, float* Param_AnimVertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_GkCatchAnimation");

	Params::SP_Character_C_Calculate_GkCatchAnimation Parms{};

	Parms.Character = Character;
	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_AnimHorizontal != nullptr)
		*Param_AnimHorizontal = Parms.Param_AnimHorizontal;

	if (Param_AnimVertical != nullptr)
		*Param_AnimVertical = Parms.Param_AnimVertical;
}


// Function SP_Character.SP_Character_C.Calculate_GkPerryImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASoccerBall_C*                    Param_SoccerBall                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Kick                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_GkPerryImpulse(class ASoccerBall_C* Param_SoccerBall, struct FVector* Kick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_GkPerryImpulse");

	Params::SP_Character_C_Calculate_GkPerryImpulse Parms{};

	Parms.Param_SoccerBall = Param_SoccerBall;

	UObject::ProcessEvent(Func, &Parms);

	if (Kick != nullptr)
		*Kick = std::move(Parms.Kick);
}


// Function SP_Character.SP_Character_C.Calculate_GkDropKickImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_ReleasePower                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          KickVector                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_GkDropKickImpulse(float Param_ReleasePower, struct FVector* KickVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_GkDropKickImpulse");

	Params::SP_Character_C_Calculate_GkDropKickImpulse Parms{};

	Parms.Param_ReleasePower = Param_ReleasePower;

	UObject::ProcessEvent(Func, &Parms);

	if (KickVector != nullptr)
		*KickVector = std::move(Parms.KickVector);
}


// Function SP_Character.SP_Character_C.Calculate_GkThrowImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_ReleasePower                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Back                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_GkThrowImpulse(float Param_ReleasePower, struct FVector* Back)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_GkThrowImpulse");

	Params::SP_Character_C_Calculate_GkThrowImpulse Parms{};

	Parms.Param_ReleasePower = Param_ReleasePower;

	UObject::ProcessEvent(Func, &Parms);

	if (Back != nullptr)
		*Back = std::move(Parms.Back);
}


// Function SP_Character.SP_Character_C.Calculate_GkRollImpulse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_ReleasePower                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          KickVector                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::Calculate_GkRollImpulse(float Param_ReleasePower, struct FVector* KickVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "Calculate_GkRollImpulse");

	Params::SP_Character_C_Calculate_GkRollImpulse Parms{};

	Parms.Param_ReleasePower = Param_ReleasePower;

	UObject::ProcessEvent(Func, &Parms);

	if (KickVector != nullptr)
		*KickVector = std::move(Parms.KickVector);
}


// Function SP_Character.SP_Character_C.RoundAuxVariables
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   AuxHorizontalIn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AuxVerticalIn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AuxHorizontalOut                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AuxVerticalOut                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASP_Character_C::RoundAuxVariables(float AuxHorizontalIn, float AuxVerticalIn, float* AuxHorizontalOut, float* AuxVerticalOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SP_Character_C", "RoundAuxVariables");

	Params::SP_Character_C_RoundAuxVariables Parms{};

	Parms.AuxHorizontalIn = AuxHorizontalIn;
	Parms.AuxVerticalIn = AuxVerticalIn;

	UObject::ProcessEvent(Func, &Parms);

	if (AuxHorizontalOut != nullptr)
		*AuxHorizontalOut = Parms.AuxHorizontalOut;

	if (AuxVerticalOut != nullptr)
		*AuxVerticalOut = Parms.AuxVerticalOut;
}

}

