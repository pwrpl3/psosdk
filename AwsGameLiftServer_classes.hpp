#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AwsGameLiftServer

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "AwsGameLiftServer_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class AwsGameLiftServer.GameLiftServerGameMode
// 0x0000 (0x0308 - 0x0308)
class AGameLiftServerGameMode final : public AGameMode
{
public:
	void Internal_PreLogin(const class FString& Options, const class FString& Address, const class FString& ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameLiftServerGameMode">();
	}
	static class AGameLiftServerGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameLiftServerGameMode>();
	}
};

// Class AwsGameLiftServer.GameLiftServerObject
// 0x4090 (0x40B8 - 0x0028)
class UGameLiftServerObject : public UObject
{
public:
	class FString                                 LogFilePath;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LogFileName;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FServerParameters                      ServerParameters;                                  // 0x0048(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                         Pad_1795[0x4020];                                  // 0x0098(0x4020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void DestroyGameLiftServer();
	static bool ProcessEnding(EGameLiftErrorType* ErrorType, class FString* ErrorMessage);

	bool AcceptPlayerSession(const class FString& PlayerSessionId, EGameLiftErrorType* ErrorType, class FString* ErrorMessage);
	bool ActivateGameSession(EGameLiftErrorType* ErrorType, class FString* ErrorMessage);
	bool DescribePlayerSessions(class UObject* WorldContextObject, const struct FServerDescribePlayerSessionsRequest& Request, struct FServerDescribePlayerSessionsResult* Result, EGameLiftErrorType* ErrorType, class FString* ErrorMessage);
	bool GetGameSessionId(class FString* GameSessionID, EGameLiftErrorType* ErrorType, class FString* ErrorMessage);
	bool GetTerminationTime(class FString* TerminationTime, EGameLiftErrorType* ErrorType, class FString* ErrorMessage);
	void InitSdk();
	bool ProcessTerminate();
	bool RemovePlayerSession(const class FString& PlayerSessionId, EGameLiftErrorType* ErrorType, class FString* ErrorMessage);
	bool ServerHealthCheck();
	bool StartGameSession(const struct FServerGameSession& Session);
	bool StartMatchBackfill(const struct FStartMatchBackfillRequestServer& Request, struct FStartMatchBackfillResultServer* Result, EGameLiftErrorType* ErrorType, class FString* ErrorMessage);
	bool StopMatchBackfill(const struct FStopMatchBackfillRequest& Request, EGameLiftErrorType* ErrorType, class FString* ErrorMessage);
	bool UpdateGameSession(const struct FServerUpdateGameSession& Session);
	bool UpdatePlayerSessionCreationPolicy(ECreationPolicy NewPlayerSessionPolicy, EGameLiftErrorType* ErrorType, class FString* ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameLiftServerObject">();
	}
	static class UGameLiftServerObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameLiftServerObject>();
	}
};

}

