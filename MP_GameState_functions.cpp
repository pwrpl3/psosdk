#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MP_GameState

#include "Basic.hpp"

#include "MP_GameState_classes.hpp"
#include "MP_GameState_parameters.hpp"


namespace SDK
{

// Function MP_GameState.MP_GameState_C.ExecuteUbergraph_MP_GameState
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::ExecuteUbergraph_MP_GameState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "ExecuteUbergraph_MP_GameState");

	Params::MP_GameState_C_ExecuteUbergraph_MP_GameState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.RedCardTick
// (BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::RedCardTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "RedCardTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AllRecieveSwapMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SwappingPlayerName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   SwappingPlayerTeam                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SwappingPlayerPosition                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::AllRecieveSwapMessage(int32 Team, const class FString& PlayerName, int32 Position, const class FString& SwappingPlayerName, int32 SwappingPlayerTeam, int32 SwappingPlayerPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AllRecieveSwapMessage");

	Params::MP_GameState_C_AllRecieveSwapMessage Parms{};

	Parms.Team = Team;
	Parms.PlayerName = std::move(PlayerName);
	Parms.Position = Position;
	Parms.SwappingPlayerName = std::move(SwappingPlayerName);
	Parms.SwappingPlayerTeam = SwappingPlayerTeam;
	Parms.SwappingPlayerPosition = SwappingPlayerPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.AllRecieveRedCardMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_GameState_C::AllRecieveRedCardMessage(int32 Team, const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AllRecieveRedCardMessage");

	Params::MP_GameState_C_AllRecieveRedCardMessage Parms{};

	Parms.Team = Team;
	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.AllRecieveYellowCardMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_GameState_C::AllRecieveYellowCardMessage(int32 Team, const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AllRecieveYellowCardMessage");

	Params::MP_GameState_C_AllRecieveYellowCardMessage Parms{};

	Parms.Team = Team;
	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.GameLiftServer_AcceptPlayerSession
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerSessionId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_GameState_C::GameLiftServer_AcceptPlayerSession(const class FString& PlayerSessionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "GameLiftServer_AcceptPlayerSession");

	Params::MP_GameState_C_GameLiftServer_AcceptPlayerSession Parms{};

	Parms.PlayerSessionId = std::move(PlayerSessionId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.AllRecieveTeamChangeMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_GameState_C::AllRecieveTeamChangeMessage(int32 Team, int32 Position, const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AllRecieveTeamChangeMessage");

	Params::MP_GameState_C_AllRecieveTeamChangeMessage Parms{};

	Parms.Team = Team;
	Parms.Position = Position;
	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.AllRecieveSystemMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_GameState_C::AllRecieveSystemMessage(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AllRecieveSystemMessage");

	Params::MP_GameState_C_AllRecieveSystemMessage Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.InitializePlayerServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           PlayerSessionId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSP_PlayerAppearance             SP_PlayerAppearance                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_GameState_C::InitializePlayerServer(const class FString& SteamID, const class FString& PlayerSessionId, class ASP_Controller_C* SP_Controller, const struct FSP_PlayerAppearance& SP_PlayerAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "InitializePlayerServer");

	Params::MP_GameState_C_InitializePlayerServer Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.PlayerSessionId = std::move(PlayerSessionId);
	Parms.SP_Controller = SP_Controller;
	Parms.SP_PlayerAppearance = std::move(SP_PlayerAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.RemovePlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::RemovePlayer(class ASP_Controller_C* SP_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "RemovePlayer");

	Params::MP_GameState_C_RemovePlayer Parms{};

	Parms.SP_Controller = SP_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.AddPlayer
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::AddPlayer(const class ASP_Controller_C*& SP_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddPlayer");

	Params::MP_GameState_C_AddPlayer Parms{};

	Parms.SP_Controller = SP_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.Set_WinningTeam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_WinningTeam                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::Set_WinningTeam(int32 Param_WinningTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "Set_WinningTeam");

	Params::MP_GameState_C_Set_WinningTeam Parms{};

	Parms.Param_WinningTeam = Param_WinningTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.Set_MatchTimeVariables
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_TotalMatchSeconds                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_MatchSeconds                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_MatchMinutes                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Team1PossessionTime                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Team2PossessionTime                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::Set_MatchTimeVariables(float Param_TotalMatchSeconds, float Param_MatchSeconds, int32 Param_MatchMinutes, float Team1PossessionTime, float Team2PossessionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "Set_MatchTimeVariables");

	Params::MP_GameState_C_Set_MatchTimeVariables Parms{};

	Parms.Param_TotalMatchSeconds = Param_TotalMatchSeconds;
	Parms.Param_MatchSeconds = Param_MatchSeconds;
	Parms.Param_MatchMinutes = Param_MatchMinutes;
	Parms.Team1PossessionTime = Team1PossessionTime;
	Parms.Team2PossessionTime = Team2PossessionTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.CheckShutdownLoop
// (BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::CheckShutdownLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "CheckShutdownLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.CheckShutdown
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::CheckShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "CheckShutdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.GameliftServer_RemovePlayerSession
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerSessionId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_GameState_C::GameliftServer_RemovePlayerSession(const class FString& PlayerSessionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "GameliftServer_RemovePlayerSession");

	Params::MP_GameState_C_GameliftServer_RemovePlayerSession Parms{};

	Parms.PlayerSessionId = std::move(PlayerSessionId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.AddPlayerToBanList
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)

void AMP_GameState_C::AddPlayerToBanList(const class FString& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddPlayerToBanList");

	Params::MP_GameState_C_AddPlayerToBanList Parms{};

	Parms.SteamID = std::move(SteamID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.CheckHostMigration
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::CheckHostMigration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "CheckHostMigration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddSpectator
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Spectator                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::AddSpectator(const class AMP_PlayerState_C*& Spectator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddSpectator");

	Params::MP_GameState_C_AddSpectator Parms{};

	Parms.Spectator = Spectator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMP_GameState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.CalculateGameMode
// (BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::CalculateGameMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "CalculateGameMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.CheckGkPossesion
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::CheckGkPossesion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "CheckGkPossesion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.BenchAllPlayers
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::BenchAllPlayers(class ASP_Controller_C* SP_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "BenchAllPlayers");

	Params::MP_GameState_C_BenchAllPlayers Parms{};

	Parms.SP_Controller = SP_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.CheckMatchStart
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::CheckMatchStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "CheckMatchStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.Reset_RedCards
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::Reset_RedCards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "Reset_RedCards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.TriggerRedCard
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMP_PlayerState_C*                Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::TriggerRedCard(int32 Team, int32 Position, const class AMP_PlayerState_C*& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "TriggerRedCard");

	Params::MP_GameState_C_TriggerRedCard Parms{};

	Parms.Team = Team;
	Parms.Position = Position;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.UpdateTeamCharacters
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::UpdateTeamCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "UpdateTeamCharacters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AllRecievePlayerMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MessageGroup                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_GameState_C::AllRecievePlayerMessage(class AMP_PlayerState_C* MP_PlayerState, const class FString& MessageGroup, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AllRecievePlayerMessage");

	Params::MP_GameState_C_AllRecievePlayerMessage Parms{};

	Parms.MP_PlayerState = MP_PlayerState;
	Parms.MessageGroup = std::move(MessageGroup);
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.AllUpdateAppearance
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AllUpdateAppearance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AllUpdateAppearance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.MP_CPT-InitiateSwap
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OnestSteamID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           TwondSteamID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   EmptyPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_CPTMinusInitiateSwap(class AMP_PlayerState_C* MP_PlayerState, const class FString& OnestSteamID, const class FString& TwondSteamID, int32 EmptyPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_CPT-InitiateSwap");

	Params::MP_GameState_C_MP_CPTMinusInitiateSwap Parms{};

	Parms.MP_PlayerState = MP_PlayerState;
	Parms.OnestSteamID = std::move(OnestSteamID);
	Parms.TwondSteamID = std::move(TwondSteamID);
	Parms.EmptyPosition = EmptyPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_CPT-KickPlayerFromTeam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_CPTMinusKickPlayerFromTeam(class AMP_PlayerState_C* MP_PlayerState, const class FString& SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_CPT-KickPlayerFromTeam");

	Params::MP_GameState_C_MP_CPTMinusKickPlayerFromTeam Parms{};

	Parms.MP_PlayerState = MP_PlayerState;
	Parms.SteamID = std::move(SteamID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_CPT-SetSubstituteSlots
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SubSlots                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_CPTMinusSetSubstituteSlots(class AMP_PlayerState_C* MP_PlayerState, int32 SubSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_CPT-SetSubstituteSlots");

	Params::MP_GameState_C_MP_CPTMinusSetSubstituteSlots Parms{};

	Parms.MP_PlayerState = MP_PlayerState;
	Parms.SubSlots = SubSlots;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.StartT2CoachVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                RequestingPlayer                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::StartT2CoachVote(class AMP_PlayerState_C* RequestingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "StartT2CoachVote");

	Params::MP_GameState_C_StartT2CoachVote Parms{};

	Parms.RequestingPlayer = RequestingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.StartT1CoachVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                RequestingPlayer                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::StartT1CoachVote(class AMP_PlayerState_C* RequestingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "StartT1CoachVote");

	Params::MP_GameState_C_StartT1CoachVote Parms{};

	Parms.RequestingPlayer = RequestingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP-SendSwapRequest
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                SwapRequester                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PlayerSessionId                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    CPT_Swap_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameState_C::MPMinusSendSwapRequest(class AMP_PlayerState_C* SwapRequester, const class FString& PlayerSessionId, bool CPT_Swap_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP-SendSwapRequest");

	Params::MP_GameState_C_MPMinusSendSwapRequest Parms{};

	Parms.SwapRequester = SwapRequester;
	Parms.PlayerSessionId = std::move(PlayerSessionId);
	Parms.CPT_Swap_ = CPT_Swap_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.StartT2VoteTimer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::StartT2VoteTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "StartT2VoteTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.StartT1VoteTimer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::StartT1VoteTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "StartT1VoteTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.MP_CPT-ImportCustomTeam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTeamInfo                        TeamInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FSP_TeamAppearance               TeamAppearance                                         (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FSP_TeamAppearance               GkAppearance                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_GameState_C::MP_CPTMinusImportCustomTeam(class AMP_PlayerState_C* MP_PlayerState, const struct FTeamInfo& TeamInfo, const struct FSP_TeamAppearance& TeamAppearance, const struct FSP_TeamAppearance& GkAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_CPT-ImportCustomTeam");

	Params::MP_GameState_C_MP_CPTMinusImportCustomTeam Parms{};

	Parms.MP_PlayerState = MP_PlayerState;
	Parms.TeamInfo = std::move(TeamInfo);
	Parms.TeamAppearance = std::move(TeamAppearance);
	Parms.GkAppearance = std::move(GkAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_CPT-ChangeFormation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_CPTMinusChangeFormation(class AMP_PlayerState_C* MP_PlayerState, int32 Selection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_CPT-ChangeFormation");

	Params::MP_GameState_C_MP_CPTMinusChangeFormation Parms{};

	Parms.MP_PlayerState = MP_PlayerState;
	Parms.Selection = Selection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.StartT2VoteCoolDown
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::StartT2VoteCoolDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "StartT2VoteCoolDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.StartT1VoteCoolDown
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::StartT1VoteCoolDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "StartT1VoteCoolDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.CoachVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CoachTeam                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::CoachVote(class AMP_PlayerState_C* MP_PlayerState, int32 CoachTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "CoachVote");

	Params::MP_GameState_C_CoachVote Parms{};

	Parms.MP_PlayerState = MP_PlayerState;
	Parms.CoachTeam = CoachTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.PlayerVoteNo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::PlayerVoteNo(class AMP_PlayerState_C* MP_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "PlayerVoteNo");

	Params::MP_GameState_C_PlayerVoteNo Parms{};

	Parms.MP_PlayerState = MP_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.PlayerVoteYes
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::PlayerVoteYes(class AMP_PlayerState_C* MP_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "PlayerVoteYes");

	Params::MP_GameState_C_PlayerVoteYes Parms{};

	Parms.MP_PlayerState = MP_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.T2VoteNo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::T2VoteNo(class AMP_PlayerState_C* MP_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "T2VoteNo");

	Params::MP_GameState_C_T2VoteNo Parms{};

	Parms.MP_PlayerState = MP_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.T2VoteYes
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::T2VoteYes(class AMP_PlayerState_C* MP_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "T2VoteYes");

	Params::MP_GameState_C_T2VoteYes Parms{};

	Parms.MP_PlayerState = MP_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.StartT2CaptainVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                RequestingPlayer                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::StartT2CaptainVote(class AMP_PlayerState_C* RequestingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "StartT2CaptainVote");

	Params::MP_GameState_C_StartT2CaptainVote Parms{};

	Parms.RequestingPlayer = RequestingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.T1VoteNo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::T1VoteNo(class AMP_PlayerState_C* MP_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "T1VoteNo");

	Params::MP_GameState_C_T1VoteNo Parms{};

	Parms.MP_PlayerState = MP_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.T1VoteYes
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::T1VoteYes(class AMP_PlayerState_C* MP_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "T1VoteYes");

	Params::MP_GameState_C_T1VoteYes Parms{};

	Parms.MP_PlayerState = MP_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.StartT1CaptainVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                RequestingPlayer                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::StartT1CaptainVote(class AMP_PlayerState_C* RequestingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "StartT1CaptainVote");

	Params::MP_GameState_C_StartT1CaptainVote Parms{};

	Parms.RequestingPlayer = RequestingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.AddTeam2Shot
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2Shot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2Shot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1Shot
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1Shot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1Shot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2INT
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2INT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2INT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1INT
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1INT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1INT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.Set_TeammateLastDefenderX
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_TeamMateLastDefenderX                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::Set_TeammateLastDefenderX(float Param_TeamMateLastDefenderX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "Set_TeammateLastDefenderX");

	Params::MP_GameState_C_Set_TeammateLastDefenderX Parms{};

	Parms.Param_TeamMateLastDefenderX = Param_TeamMateLastDefenderX;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.AddTeam2SPTO
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2SPTO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2SPTO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1SPTO
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1SPTO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1SPTO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2DoubleTouch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2DoubleTouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2DoubleTouch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1DoubleTouch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1DoubleTouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1DoubleTouch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2RedCard
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2RedCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2RedCard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1RedCard
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1RedCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1RedCard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2YellowCard
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2YellowCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2YellowCard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1YellowCard
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1YellowCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1YellowCard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2Offsides
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2Offsides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2Offsides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1Offsides
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1Offsides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1Offsides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2Foul
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2Foul()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2Foul");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1Foul
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1Foul()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1Foul");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2Penalty
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2Penalty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2Penalty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1Penalty
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1Penalty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1Penalty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2FreeKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2FreeKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2FreeKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1FreeKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1FreeKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1FreeKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2ThrowIn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2ThrowIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2ThrowIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1ThrowIn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1ThrowIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1ThrowIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2Corner
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2Corner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2Corner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1Corner
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1Corner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1Corner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2GoalKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2GoalKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2GoalKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1GoalKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1GoalKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1GoalKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2TKL
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2TKL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2TKL");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1TKL
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1TKL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1TKL");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2Assist
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2Assist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2Assist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1Assist
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1Assist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1Assist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam2Pass
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam2Pass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam2Pass");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.AddTeam1Pass
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::AddTeam1Pass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "AddTeam1Pass");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.ResetTeamStats
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_GameState_C::ResetTeamStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "ResetTeamStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_GameState.MP_GameState_C.MP_Host-SetRedCardLength
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_RedCardLength                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusSetRedCardLength(class ASP_Controller_C* SP_Controller, int32 Param_RedCardLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-SetRedCardLength");

	Params::MP_GameState_C_MP_HostMinusSetRedCardLength Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Param_RedCardLength = Param_RedCardLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-SetCaptainRolesEnabled
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_CaptainRolesAllowed                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameState_C::MP_HostMinusSetCaptainRolesEnabled(class ASP_Controller_C* SP_Controller, bool Param_CaptainRolesAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-SetCaptainRolesEnabled");

	Params::MP_GameState_C_MP_HostMinusSetCaptainRolesEnabled Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Param_CaptainRolesAllowed = Param_CaptainRolesAllowed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-SetCoachRolesEnabled
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_CoachRolesAllowed                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameState_C::MP_HostMinusSetCoachRolesEnabled(class ASP_Controller_C* SP_Controller, bool Param_CoachRolesAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-SetCoachRolesEnabled");

	Params::MP_GameState_C_MP_HostMinusSetCoachRolesEnabled Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Param_CoachRolesAllowed = Param_CoachRolesAllowed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-GiveHost
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMP_PlayerState_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusGiveHost(class ASP_Controller_C* SP_Controller, class AMP_PlayerState_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-GiveHost");

	Params::MP_GameState_C_MP_HostMinusGiveHost Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-BanPlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMP_PlayerState_C*                MP_PlayerState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusBanPlayer(class ASP_Controller_C* SP_Controller, class AMP_PlayerState_C* MP_PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-BanPlayer");

	Params::MP_GameState_C_MP_HostMinusBanPlayer Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.MP_PlayerState = MP_PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-KickPlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMP_PlayerState_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusKickPlayer(class ASP_Controller_C* SP_Controller, class AMP_PlayerState_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-KickPlayer");

	Params::MP_GameState_C_MP_HostMinusKickPlayer Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-ForceSpectate
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMP_PlayerState_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusForceSpectate(class ASP_Controller_C* SP_Controller, class AMP_PlayerState_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-ForceSpectate");

	Params::MP_GameState_C_MP_HostMinusForceSpectate Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.UnmutePlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMP_PlayerState_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::UnmutePlayer(class ASP_Controller_C* SP_Controller, class AMP_PlayerState_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "UnmutePlayer");

	Params::MP_GameState_C_UnmutePlayer Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-SetAutoStart
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_AutoStart                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameState_C::MP_HostMinusSetAutoStart(class ASP_Controller_C* SP_Controller, bool Param_AutoStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-SetAutoStart");

	Params::MP_GameState_C_MP_HostMinusSetAutoStart Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Param_AutoStart = Param_AutoStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-SetSingleKeeper
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_SingleKeeper                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameState_C::MP_HostMinusSetSingleKeeper(class ASP_Controller_C* SP_Controller, bool Param_SingleKeeper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-SetSingleKeeper");

	Params::MP_GameState_C_MP_HostMinusSetSingleKeeper Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Param_SingleKeeper = Param_SingleKeeper;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-SetOvertimeMode
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OvertimeMode                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusSetOvertimeMode(class ASP_Controller_C* SP_Controller, int32 OvertimeMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-SetOvertimeMode");

	Params::MP_GameState_C_MP_HostMinusSetOvertimeMode Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.OvertimeMode = OvertimeMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-Set1stPersonOnly
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_OnestPersonOnly                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_GameState_C::MP_HostMinusSet1stPersonOnly(class ASP_Controller_C* SP_Controller, bool Param_OnestPersonOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-Set1stPersonOnly");

	Params::MP_GameState_C_MP_HostMinusSet1stPersonOnly Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Param_OnestPersonOnly = Param_OnestPersonOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-SetMatchLength
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_MatchLength                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusSetMatchLength(class ASP_Controller_C* SP_Controller, int32 Param_MatchLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-SetMatchLength");

	Params::MP_GameState_C_MP_HostMinusSetMatchLength Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Param_MatchLength = Param_MatchLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-SetTeamSize
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_TeamSize                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusSetTeamSize(class ASP_Controller_C* SP_Controller, int32 Param_TeamSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-SetTeamSize");

	Params::MP_GameState_C_MP_HostMinusSetTeamSize Parms{};

	Parms.SP_Controller = SP_Controller;
	Parms.Param_TeamSize = Param_TeamSize;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-ForceResetMatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusForceResetMatch(class ASP_Controller_C* SP_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-ForceResetMatch");

	Params::MP_GameState_C_MP_HostMinusForceResetMatch Parms{};

	Parms.SP_Controller = SP_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.MP_Host-ForceStartMatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASP_Controller_C*                 SP_Controller                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::MP_HostMinusForceStartMatch(class ASP_Controller_C* SP_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "MP_Host-ForceStartMatch");

	Params::MP_GameState_C_MP_HostMinusForceStartMatch Parms{};

	Parms.SP_Controller = SP_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_GameState.MP_GameState_C.CalculateFormationChange
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTeamFormation                   Formation                                              (Parm, OutParm, HasGetValueTypeHash)

void AMP_GameState_C::CalculateFormationChange(int32 Selection, struct FTeamFormation* Formation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "CalculateFormationChange");

	Params::MP_GameState_C_CalculateFormationChange Parms{};

	Parms.Selection = Selection;

	UObject::ProcessEvent(Func, &Parms);

	if (Formation != nullptr)
		*Formation = std::move(Parms.Formation);
}


// Function MP_GameState.MP_GameState_C.CalculatePlayerSwapPositions
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Player1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMP_PlayerState_C*                Player2                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_GameState_C::CalculatePlayerSwapPositions(class AMP_PlayerState_C* Player1, class AMP_PlayerState_C* Player2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_GameState_C", "CalculatePlayerSwapPositions");

	Params::MP_GameState_C_CalculatePlayerSwapPositions Parms{};

	Parms.Player1 = Player1;
	Parms.Player2 = Player2;

	UObject::ProcessEvent(Func, &Parms);
}

}

