#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MP_PlayerState

#include "Basic.hpp"

#include "MP_PlayerState_classes.hpp"
#include "MP_PlayerState_parameters.hpp"


namespace SDK
{

// Function MP_PlayerState.MP_PlayerState_C.ExecuteUbergraph_MP_PlayerState
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_PlayerState_C::ExecuteUbergraph_MP_PlayerState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "ExecuteUbergraph_MP_PlayerState");

	Params::MP_PlayerState_C_ExecuteUbergraph_MP_PlayerState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerState.MP_PlayerState_C.CheckInitialization
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::CheckInitialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "CheckInitialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.StartPersonalVoteCooldown
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::StartPersonalVoteCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "StartPersonalVoteCooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.StartPersonalVoteTimer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::StartPersonalVoteTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "StartPersonalVoteTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Position
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_SubTeam                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_SubPosition                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SendTeamChangeMessage                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerState_C::Func_Position_0(int32 Param_SubTeam, int32 Param_SubPosition, bool SendTeamChangeMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Position");

	Params::MP_PlayerState_C_Position Parms{};

	Parms.Param_SubTeam = Param_SubTeam;
	Parms.Param_SubPosition = Param_SubPosition;
	Parms.SendTeamChangeMessage = SendTeamChangeMessage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerState.MP_PlayerState_C.InitiateSwap
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::InitiateSwap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "InitiateSwap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.PersonalVoteNo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::PersonalVoteNo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "PersonalVoteNo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.PersonalVoteYes
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::PersonalVoteYes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "PersonalVoteYes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.MP-RecieveSwapRequest
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMP_PlayerState_C*                Param_SwapRequester                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CPT_Swap_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerState_C::MPMinusRecieveSwapRequest(class AMP_PlayerState_C* Param_SwapRequester, bool CPT_Swap_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "MP-RecieveSwapRequest");

	Params::MP_PlayerState_C_MPMinusRecieveSwapRequest Parms{};

	Parms.Param_SwapRequester = Param_SwapRequester;
	Parms.CPT_Swap_ = CPT_Swap_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerState.MP_PlayerState_C.UpdateSteamNameSuccess
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVaRestRequestJSON*               Request                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_PlayerState_C::UpdateSteamNameSuccess(class UVaRestRequestJSON* Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "UpdateSteamNameSuccess");

	Params::MP_PlayerState_C_UpdateSteamNameSuccess Parms{};

	Parms.Request = Request;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerState.MP_PlayerState_C.UpdateSteamNameFail
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVaRestRequestJSON*               Request                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMP_PlayerState_C::UpdateSteamNameFail(class UVaRestRequestJSON* Request)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "UpdateSteamNameFail");

	Params::MP_PlayerState_C_UpdateSteamNameFail Parms{};

	Parms.Request = Request;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerState.MP_PlayerState_C.InitializePlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_SteamID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           SteamTicket                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Param_PlayerSessionId                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ASP_Controller_C*                 Param_SP_Controller                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSP_PlayerAppearance             Param_SP_PlayerAppearance                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AMP_PlayerState_C::InitializePlayer(const class FString& Param_SteamID, const class FString& SteamTicket, const class FString& Param_PlayerSessionId, class ASP_Controller_C* Param_SP_Controller, const struct FSP_PlayerAppearance& Param_SP_PlayerAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "InitializePlayer");

	Params::MP_PlayerState_C_InitializePlayer Parms{};

	Parms.Param_SteamID = std::move(Param_SteamID);
	Parms.SteamTicket = std::move(SteamTicket);
	Parms.Param_PlayerSessionId = std::move(Param_PlayerSessionId);
	Parms.Param_SP_Controller = Param_SP_Controller;
	Parms.Param_SP_PlayerAppearance = std::move(Param_SP_PlayerAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerState.MP_PlayerState_C.RemoveCaptain
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::RemoveCaptain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "RemoveCaptain");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Set_MuteReason
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_MuteReason                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMP_PlayerState_C::Set_MuteReason(const class FString& Param_MuteReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Set_MuteReason");

	Params::MP_PlayerState_C_Set_MuteReason Parms{};

	Parms.Param_MuteReason = std::move(Param_MuteReason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerState.MP_PlayerState_C.Stats_Add_Shot
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Stats_Add_Shot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Stats_Add_Shot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Stats_Add_INT
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Stats_Add_INT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Stats_Add_INT");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Set_IsAfk
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsAfk                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerState_C::Set_IsAfk(bool Param_IsAfk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Set_IsAfk");

	Params::MP_PlayerState_C_Set_IsAfk Parms{};

	Parms.Param_IsAfk = Param_IsAfk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerState.MP_PlayerState_C.Reset_FoulState
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Reset_FoulState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Reset_FoulState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.AddFoul
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::AddFoul()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "AddFoul");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.RecieveKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::RecieveKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "RecieveKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.ForceSpectate
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::ForceSpectate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "ForceSpectate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Stats_AddCatch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Stats_AddCatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Stats_AddCatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Stats_Reset
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Stats_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Stats_Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Stats_AddSave
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Stats_AddSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Stats_AddSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Stats_AddTKL
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Stats_AddTKL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Stats_AddTKL");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Stats_AddGoal
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Stats_AddGoal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Stats_AddGoal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Stats_AddAssist
// (BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Stats_AddAssist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Stats_AddAssist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Stats_AddPass
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::Stats_AddPass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Stats_AddPass");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.GetReferences
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AMP_PlayerState_C::GetReferences()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "GetReferences");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMP_PlayerState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MP_PlayerState.MP_PlayerState_C.Position
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Team                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Position                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SendTeamChangeMessage_                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMP_PlayerState_C::Func_Position(int32 Param_Team, int32 Param_Position, bool SendTeamChangeMessage_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "Position");

	Params::MP_PlayerState_C_Position Parms{};

	Parms.Param_Team = Param_Team;
	Parms.Param_Position = Param_Position;
	Parms.SendTeamChangeMessage_ = SendTeamChangeMessage_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MP_PlayerState.MP_PlayerState_C.CalculateTeamChangeMessage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           TeamChangeMessage                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AMP_PlayerState_C::CalculateTeamChangeMessage(class FString* TeamChangeMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MP_PlayerState_C", "CalculateTeamChangeMessage");

	Params::MP_PlayerState_C_CalculateTeamChangeMessage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TeamChangeMessage != nullptr)
		*TeamChangeMessage = std::move(Parms.TeamChangeMessage);
}

}

