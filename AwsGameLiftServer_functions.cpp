#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AwsGameLiftServer

#include "Basic.hpp"

#include "AwsGameLiftServer_classes.hpp"
#include "AwsGameLiftServer_parameters.hpp"


namespace SDK
{

// Function AwsGameLiftServer.GameLiftServerGameMode.Internal_PreLogin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Address                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameLiftServerGameMode::Internal_PreLogin(const class FString& Options, const class FString& Address, const class FString& ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerGameMode", "Internal_PreLogin");

	Params::GameLiftServerGameMode_Internal_PreLogin Parms{};

	Parms.Options = std::move(Options);
	Parms.Address = std::move(Address);
	Parms.ErrorMessage = std::move(ErrorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AwsGameLiftServer.GameLiftServerObject.DestroyGameLiftServer
// (Final, Native, Static, Public, BlueprintCallable)

void UGameLiftServerObject::DestroyGameLiftServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameLiftServerObject", "DestroyGameLiftServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AwsGameLiftServer.GameLiftServerObject.ProcessEnding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::ProcessEnding(EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameLiftServerObject", "ProcessEnding");

	Params::GameLiftServerObject_ProcessEnding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.AcceptPlayerSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PlayerSessionId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::AcceptPlayerSession(const class FString& PlayerSessionId, EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "AcceptPlayerSession");

	Params::GameLiftServerObject_AcceptPlayerSession Parms{};

	Parms.PlayerSessionId = std::move(PlayerSessionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.ActivateGameSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::ActivateGameSession(EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "ActivateGameSession");

	Params::GameLiftServerObject_ActivateGameSession Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.DescribePlayerSessions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FServerDescribePlayerSessionsRequestRequest                                                (Parm, NativeAccessSpecifierPublic)
// struct FServerDescribePlayerSessionsResultResult                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::DescribePlayerSessions(class UObject* WorldContextObject, const struct FServerDescribePlayerSessionsRequest& Request, struct FServerDescribePlayerSessionsResult* Result, EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "DescribePlayerSessions");

	Params::GameLiftServerObject_DescribePlayerSessions Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.GetGameSessionId
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           GameSessionID                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::GetGameSessionId(class FString* GameSessionID, EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "GetGameSessionId");

	Params::GameLiftServerObject_GetGameSessionId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (GameSessionID != nullptr)
		*GameSessionID = std::move(Parms.GameSessionID);

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.GetTerminationTime
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           TerminationTime                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::GetTerminationTime(class FString* TerminationTime, EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "GetTerminationTime");

	Params::GameLiftServerObject_GetTerminationTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TerminationTime != nullptr)
		*TerminationTime = std::move(Parms.TerminationTime);

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.InitSdk
// (Final, Native, Public, BlueprintCallable)

void UGameLiftServerObject::InitSdk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "InitSdk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AwsGameLiftServer.GameLiftServerObject.ProcessTerminate
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::ProcessTerminate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "ProcessTerminate");

	Params::GameLiftServerObject_ProcessTerminate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.RemovePlayerSession
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PlayerSessionId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::RemovePlayerSession(const class FString& PlayerSessionId, EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "RemovePlayerSession");

	Params::GameLiftServerObject_RemovePlayerSession Parms{};

	Parms.PlayerSessionId = std::move(PlayerSessionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.ServerHealthCheck
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::ServerHealthCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "ServerHealthCheck");

	Params::GameLiftServerObject_ServerHealthCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.StartGameSession
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FServerGameSession               Session                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::StartGameSession(const struct FServerGameSession& Session)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "StartGameSession");

	Params::GameLiftServerObject_StartGameSession Parms{};

	Parms.Session = std::move(Session);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.StartMatchBackfill
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStartMatchBackfillRequestServer Request                                                (Parm, NativeAccessSpecifierPublic)
// struct FStartMatchBackfillResultServer  Result                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::StartMatchBackfill(const struct FStartMatchBackfillRequestServer& Request, struct FStartMatchBackfillResultServer* Result, EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "StartMatchBackfill");

	Params::GameLiftServerObject_StartMatchBackfill Parms{};

	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.StopMatchBackfill
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FStopMatchBackfillRequest        Request                                                (Parm, NativeAccessSpecifierPublic)
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::StopMatchBackfill(const struct FStopMatchBackfillRequest& Request, EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "StopMatchBackfill");

	Params::GameLiftServerObject_StopMatchBackfill Parms{};

	Parms.Request = std::move(Request);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.UpdateGameSession
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FServerUpdateGameSession         Session                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::UpdateGameSession(const struct FServerUpdateGameSession& Session)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "UpdateGameSession");

	Params::GameLiftServerObject_UpdateGameSession Parms{};

	Parms.Session = std::move(Session);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AwsGameLiftServer.GameLiftServerObject.UpdatePlayerSessionCreationPolicy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ECreationPolicy                         NewPlayerSessionPolicy                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameLiftErrorType                      ErrorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameLiftServerObject::UpdatePlayerSessionCreationPolicy(ECreationPolicy NewPlayerSessionPolicy, EGameLiftErrorType* ErrorType, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameLiftServerObject", "UpdatePlayerSessionCreationPolicy");

	Params::GameLiftServerObject_UpdatePlayerSessionCreationPolicy Parms{};

	Parms.NewPlayerSessionPolicy = NewPlayerSessionPolicy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorType != nullptr)
		*ErrorType = Parms.ErrorType;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}

}

