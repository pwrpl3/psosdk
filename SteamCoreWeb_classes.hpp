#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamCoreWeb

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "SteamCoreWeb_structs.hpp"


namespace SDK
{

// Class SteamCoreWeb.SteamCoreWeb
// 0x0000 (0x0028 - 0x0028)
class USteamCoreWeb final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWeb">();
	}
	static class USteamCoreWeb* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWeb>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncAction
// 0x0028 (0x0058 - 0x0030)
class USteamCoreWebAsyncAction : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnCallback;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A4[0x18];                                    // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCallback(const class FString& Data, bool bWasSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncAction">();
	}
	static class USteamCoreWebAsyncAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncAction>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetPlayerBans
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetPlayerBans final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetPlayerBans* GetPlayerBansAsync(class UObject* WorldContextObject, const class FString& Key, const TArray<class FString>& SteamIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetPlayerBans">();
	}
	static class USteamCoreWebAsyncActionGetPlayerBans* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetPlayerBans>();
	}
};

// Class SteamCoreWeb.SteamCoreWebSubsystem
// 0x0018 (0x0048 - 0x0030)
class USteamCoreWebSubsystem : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_14A6[0x18];                                    // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebSubsystem">();
	}
	static class USteamCoreWebSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebSubsystem>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionExchangeItem
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionExchangeItem final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionExchangeItem* ExchangeItemAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const TArray<int32>& MaterialsItemID, const TArray<int32>& MaterialsQuantity, const class FString& OutputItemdefId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionExchangeItem">();
	}
	static class USteamCoreWebAsyncActionExchangeItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionExchangeItem>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetNewsForApp
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetNewsForApp final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetNewsForApp* GetNewsForAppAsync(class UObject* WorldContextObject, int32 AppID, int32 MaxLength, const TArray<class FString>& Feeds, int32 EndDate, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetNewsForApp">();
	}
	static class USteamCoreWebAsyncActionGetNewsForApp* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetNewsForApp>();
	}
};

// Class SteamCoreWeb.SteamCoreWebSettings
// 0x0040 (0x0078 - 0x0038)
class USteamCoreWebSettings final : public UDeveloperSettings
{
public:
	float                                         AsyncTaskTimeout;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisabledSubsystems;                                // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugging;                                        // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDevMode;                                          // 0x0041(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A8[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppID;                                             // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A9[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DevSteamID;                                        // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSandboxMode;                                      // 0x0070(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14AA[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebSettings">();
	}
	static class USteamCoreWebSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebSettings>();
	}
};

// Class SteamCoreWeb.SteamWebUtilities
// 0x0000 (0x0028 - 0x0028)
class USteamWebUtilities final : public UBlueprintFunctionLibrary
{
public:
	static void FindJsonBool(const class FString& JsonString, const class FString& Key, bool* bValue, ESteamJsonResult* Result);
	static void FindJsonBools(const class FString& JsonString, const class FString& Key, TArray<bool>* bValues, ESteamJsonResult* Result);
	static void FindJsonNumber(const class FString& JsonString, const class FString& Key, int32* Value, ESteamJsonResult* Result);
	static void FindJsonNumbers(const class FString& JsonString, const class FString& Key, TArray<int32>* Values, ESteamJsonResult* Result);
	static void FindJsonString(const class FString& JsonString, const class FString& Key, class FString* Value, ESteamJsonResult* Result);
	static void FindJsonStrings(const class FString& JsonString, const class FString& Key, TArray<class FString>* Values, ESteamJsonResult* Result);
	static class FString GetDevSteamID();
	static int32 GetProjectAppID();
	static class FString GetProjectKey();
	static bool ParseJson(const class FString& JsonString, TArray<struct FSteamCoreJson>* Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamWebUtilities">();
	}
	static class USteamWebUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamWebUtilities>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionDeleteSessionBatch
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionDeleteSessionBatch final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionDeleteSessionBatch* DeleteSessionBatchAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SessionID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionDeleteSessionBatch">();
	}
	static class USteamCoreWebAsyncActionDeleteSessionBatch* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionDeleteSessionBatch>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetExportedAssetsForUser
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetExportedAssetsForUser final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetExportedAssetsForUser* GetExportedAssetsForUserAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& ContextId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetExportedAssetsForUser">();
	}
	static class USteamCoreWebAsyncActionGetExportedAssetsForUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetExportedAssetsForUser>();
	}
};

// Class SteamCoreWeb.WebApps
// 0x0000 (0x0048 - 0x0048)
class UWebApps final : public USteamCoreWebSubsystem
{
public:
	void GetAppBetas(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID);
	void GetAppBuilds(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 Count);
	void GetAppDepotVersions(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID);
	void GetAppList(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key);
	void GetCheatingReports(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 TimeBegin, int32 TimeEnd, bool bIncludeReports, bool bIncludeBans, int32 ReportidMin);
	void GetPlayersBanned(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID);
	void GetServerList(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& Filter, int32 Limit);
	void GetServersAtAddress(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Addr);
	void SetAppBuildLive(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 BuildId, const class FString& BetaKey, const class FString& Description);
	void UpToDateCheck(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, int32 AppID, int32 Version);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebApps">();
	}
	static class UWebApps* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebApps>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionGetAppBetas
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionGetAppBetas final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionGetAppBetas* GetAppBetasAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionGetAppBetas">();
	}
	static class USteamCoreAppsAsyncActionGetAppBetas* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionGetAppBetas>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetAppPriceInfo
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetAppPriceInfo final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetAppPriceInfo* GetAppPriceInfoAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, const TArray<int32>& AppIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetAppPriceInfo">();
	}
	static class USteamCoreWebAsyncActionGetAppPriceInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetAppPriceInfo>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionGetAppBuilds
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionGetAppBuilds final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionGetAppBuilds* GetAppBuildsAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionGetAppBuilds">();
	}
	static class USteamCoreAppsAsyncActionGetAppBuilds* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionGetAppBuilds>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionGetAppDepotVersions
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionGetAppDepotVersions final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionGetAppDepotVersions* GetAppDepotVersionsAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionGetAppDepotVersions">();
	}
	static class USteamCoreAppsAsyncActionGetAppDepotVersions* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionGetAppDepotVersions>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionAuthenticateUser
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionAuthenticateUser final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionAuthenticateUser* AuthenticateUserAsync(class UObject* WorldContextObject, const class FString& SteamID, const TArray<uint8>& SessionKey, const TArray<uint8>& EncryptedLoginKey);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionAuthenticateUser">();
	}
	static class USteamCoreWebAsyncActionAuthenticateUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionAuthenticateUser>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionGetAppList
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionGetAppList final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionGetAppList* GetAppListAsync(class UObject* WorldContextObject, const class FString& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionGetAppList">();
	}
	static class USteamCoreAppsAsyncActionGetAppList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionGetAppList>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionGetCheatingReports
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionGetCheatingReports final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionGetCheatingReports* GetCheatingReportsAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, int32 TimeBegin, int32 TimeEnd, bool bIncludeReports, bool bIncludeBans, int32 ReportidMin);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionGetCheatingReports">();
	}
	static class USteamCoreAppsAsyncActionGetCheatingReports* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionGetCheatingReports>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetPublisherAppOwnership
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetPublisherAppOwnership final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetPublisherAppOwnership* GetPublisherAppOwnershipAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetPublisherAppOwnership">();
	}
	static class USteamCoreWebAsyncActionGetPublisherAppOwnership* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetPublisherAppOwnership>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionGetPlayersBanned
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionGetPlayersBanned final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionGetPlayersBanned* GetPlayersBannedAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionGetPlayersBanned">();
	}
	static class USteamCoreAppsAsyncActionGetPlayersBanned* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionGetPlayersBanned>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionGetServerList
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionGetServerList final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionGetServerList* GetServerListAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& Filter, int32 Limit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionGetServerList">();
	}
	static class USteamCoreAppsAsyncActionGetServerList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionGetServerList>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetItemDefs
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetItemDefs final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetItemDefs* GetItemDefsAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& ModifiedSince, const TArray<int32>& ItemdefIDs, const TArray<int32>& WorkshopIDs, int32 CacheMaxAgeSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetItemDefs">();
	}
	static class USteamCoreWebAsyncActionGetItemDefs* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetItemDefs>();
	}
};

// Class SteamCoreWeb.WebSteamUser
// 0x0000 (0x0048 - 0x0048)
class UWebSteamUser final : public USteamCoreWebSubsystem
{
public:
	void CheckAppOwnership(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID);
	void GetAppPriceInfo(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, const TArray<int32>& AppIDs);
	void GetFriendList(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, const class FString& Relationship);
	void GetPlayerBans(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const TArray<class FString>& SteamIDs);
	void GetPlayerSummaries(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const TArray<class FString>& SteamIDs);
	void GetPublisherAppOwnership(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID);
	void GetPublisherAppOwnershipChanges(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& PackageRowVersion, const class FString& CDKeyRowVersion);
	void GetUserGroupList(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID);
	void GrantPackage(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 PackageId, const class FString& IpAddress, const class FString& ThirdPartyKey, int32 ThirdPartyAppId);
	void ResolveVanityURL(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& VanityURL, EVanityUrlType URLType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebSteamUser">();
	}
	static class UWebSteamUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebSteamUser>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionGetServersAtAddress
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionGetServersAtAddress final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionGetServersAtAddress* GetServersAtAddressAsync(class UObject* WorldContextObject, const class FString& Addr);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionGetServersAtAddress">();
	}
	static class USteamCoreAppsAsyncActionGetServersAtAddress* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionGetServersAtAddress>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionCancelAppListingsForUser
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionCancelAppListingsForUser final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionCancelAppListingsForUser* CancelAppListingsForUserAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, bool bSynchronous);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionCancelAppListingsForUser">();
	}
	static class USteamCoreWebAsyncActionCancelAppListingsForUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionCancelAppListingsForUser>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionSetAppBuildLive
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionSetAppBuildLive final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionSetAppBuildLive* SetAppBuildLiveAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, int32 BuildId, const class FString& BetaKey, const class FString& Description);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionSetAppBuildLive">();
	}
	static class USteamCoreAppsAsyncActionSetAppBuildLive* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionSetAppBuildLive>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionResolveVanityURL
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionResolveVanityURL final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionResolveVanityURL* ResolveVanityURLAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& VanityURL, EVanityUrlType URLType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionResolveVanityURL">();
	}
	static class USteamCoreWebAsyncActionResolveVanityURL* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionResolveVanityURL>();
	}
};

// Class SteamCoreWeb.SteamCoreAppsAsyncActionUpToDateCheck
// 0x0000 (0x0058 - 0x0058)
class USteamCoreAppsAsyncActionUpToDateCheck final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreAppsAsyncActionUpToDateCheck* UpToDateCheckAsync(class UObject* WorldContextObject, int32 AppID, int32 Version);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreAppsAsyncActionUpToDateCheck">();
	}
	static class USteamCoreAppsAsyncActionUpToDateCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreAppsAsyncActionUpToDateCheck>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionReportCheatData
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionReportCheatData final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionReportCheatData* ReportCheatDataAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& PathAndFileName, const class FString& WebCheatURL, const class FString& TimeNow, const class FString& TimeStarted, const class FString& TimeStopped, const class FString& CheatName, int32 GameProcessId, int32 CheatProcessId, const class FString& CheatParam1, const class FString& CheatParam2);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionReportCheatData">();
	}
	static class USteamCoreWebAsyncActionReportCheatData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionReportCheatData>();
	}
};

// Class SteamCoreWeb.WebBroadcastService
// 0x0000 (0x0048 - 0x0048)
class UWebBroadcastService final : public USteamCoreWebSubsystem
{
public:
	void PostGameDataFrame(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& BroadcastId, const class FString& FrameData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebBroadcastService">();
	}
	static class UWebBroadcastService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebBroadcastService>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetUserStatsForGame
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetUserStatsForGame final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetUserStatsForGame* GetUserStatsForGameAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetUserStatsForGame">();
	}
	static class USteamCoreWebAsyncActionGetUserStatsForGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetUserStatsForGame>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionPostGameDataFrame
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionPostGameDataFrame final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionPostGameDataFrame* PostGameDataFrameAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& BroadcastId, const class FString& FrameData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionPostGameDataFrame">();
	}
	static class USteamCoreWebAsyncActionPostGameDataFrame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionPostGameDataFrame>();
	}
};

// Class SteamCoreWeb.WebCheatReporting
// 0x0000 (0x0048 - 0x0048)
class UWebCheatReporting final : public USteamCoreWebSubsystem
{
public:
	void EndSecureMultiplayerSession(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& SessionID);
	void GetCheatingReports(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 TimeEnd, int32 TimeBegin, const class FString& ReportidMin, bool bIncludeReports, bool bIncludeBans, const class FString& SteamID);
	void RemovePlayerGameBan(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID);
	void ReportCheatData(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& PathAndFileName, const class FString& WebCheatURL, const class FString& TimeNow, const class FString& TimeStarted, const class FString& TimeStopped, const class FString& CheatName, int32 GameProcessId, int32 CheatProcessId, const class FString& CheatParam1, const class FString& CheatParam2);
	void ReportPlayerCheating(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& SteamIdReporter, const class FString& AppData, bool bHeuristic, bool bDetection, bool bPlayerReport, bool bNoReportID, int32 GameMode, int32 SuspicionStartTime, int32 Severity);
	void RequestPlayerGameBan(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& ReportID, const class FString& CheatDescription, int32 Duration, bool bDelayBan);
	void RequestVacStatusForUser(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& SessionID);
	void StartSecureMultiplayerSession(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebCheatReporting">();
	}
	static class UWebCheatReporting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebCheatReporting>();
	}
};

// Class SteamCoreWeb.WebUserStats
// 0x0000 (0x0048 - 0x0048)
class UWebUserStats final : public USteamCoreWebSubsystem
{
public:
	void GetGlobalAchievementPercentagesForApp(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& GameID);
	void GetGlobalStatsForGame(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, int32 AppID, const TArray<class FString>& Names, int32 StartDate, int32 EndDate);
	void GetNumberOfCurrentPlayers(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, int32 AppID);
	void GetPlayerAchievements(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& Language);
	void GetSchemaForGame(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& Language);
	void GetUserStatsForGame(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID);
	void SetUserStatsForGame(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const TArray<class FString>& Names, const TArray<int32>& Values);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebUserStats">();
	}
	static class UWebUserStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebUserStats>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionReportPlayerCheating
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionReportPlayerCheating final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionReportPlayerCheating* ReportPlayerCheatingAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& SteamIdReporter, const class FString& AppData, bool bHeuristic, bool bDetection, bool bPlayerReport, bool bNoReportID, int32 GameMode, int32 SuspicionStartTime, int32 Severity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionReportPlayerCheating">();
	}
	static class USteamCoreWebAsyncActionReportPlayerCheating* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionReportPlayerCheating>();
	}
};

// Class SteamCoreWeb.WebEconMarketService
// 0x0000 (0x0048 - 0x0048)
class UWebEconMarketService final : public USteamCoreWebSubsystem
{
public:
	void CancelAppListingsForUser(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, bool bSynchronous);
	void GetAssetID(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& ListingId);
	void GetMarketEligibility(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID);
	void GetPopular(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& Language, int32 Rows, int32 Start, int32 FilterAppId, int32 ECurrency);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebEconMarketService">();
	}
	static class UWebEconMarketService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebEconMarketService>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionRequestPlayerGameBan
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionRequestPlayerGameBan final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionRequestPlayerGameBan* RequestPlayerGameBanAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& ReportID, const class FString& CheatDescription, int32 Duration, bool bDelayBan);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionRequestPlayerGameBan">();
	}
	static class USteamCoreWebAsyncActionRequestPlayerGameBan* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionRequestPlayerGameBan>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetUserGroupList
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetUserGroupList final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetUserGroupList* GetUserGroupListAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetUserGroupList">();
	}
	static class USteamCoreWebAsyncActionGetUserGroupList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetUserGroupList>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionRemovePlayerGameBan
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionRemovePlayerGameBan final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionRemovePlayerGameBan* RemovePlayerGameBanAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionRemovePlayerGameBan">();
	}
	static class USteamCoreWebAsyncActionRemovePlayerGameBan* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionRemovePlayerGameBan>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetCheatingReports
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetCheatingReports final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetCheatingReports* GetCheatingReportsAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, int32 TimeEnd, int32 TimeBegin, const class FString& ReportidMin, bool bIncludeReports, bool bIncludeBans, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetCheatingReports">();
	}
	static class USteamCoreWebAsyncActionGetCheatingReports* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetCheatingReports>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionRequestVacStatusForUser
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionRequestVacStatusForUser final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionRequestVacStatusForUser* RequestVacStatusForUserAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& SessionID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionRequestVacStatusForUser">();
	}
	static class USteamCoreWebAsyncActionRequestVacStatusForUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionRequestVacStatusForUser>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionStartSecureMultiplayerSession
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionStartSecureMultiplayerSession final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionStartSecureMultiplayerSession* StartSecureMultiplayerSessionAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionStartSecureMultiplayerSession">();
	}
	static class USteamCoreWebAsyncActionStartSecureMultiplayerSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionStartSecureMultiplayerSession>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionEndSecureMultiplayerSession
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionEndSecureMultiplayerSession final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionEndSecureMultiplayerSession* EndSecureMultiplayerSessionAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& SessionID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionEndSecureMultiplayerSession">();
	}
	static class USteamCoreWebAsyncActionEndSecureMultiplayerSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionEndSecureMultiplayerSession>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetMarketEligibility
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetMarketEligibility final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetMarketEligibility* GetMarketEligibilityAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetMarketEligibility">();
	}
	static class USteamCoreWebAsyncActionGetMarketEligibility* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetMarketEligibility>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetAssetID
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetAssetID final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetAssetID* GetAssetIDAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& ListingId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetAssetID">();
	}
	static class USteamCoreWebAsyncActionGetAssetID* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetAssetID>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetPopular
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetPopular final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetPopular* GetPopularAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& Language, int32 Rows, int32 Start, int32 FilterAppId, int32 ECurrency);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetPopular">();
	}
	static class USteamCoreWebAsyncActionGetPopular* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetPopular>();
	}
};

// Class SteamCoreWeb.WebEconService
// 0x0000 (0x0048 - 0x0048)
class UWebEconService final : public USteamCoreWebSubsystem
{
public:
	void CancelTradeOffer(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& TradeOfferId);
	void DeclineTradeOffer(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& TradeOfferId);
	void FlushAssetAppearanceCache(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID);
	void FlushContextCache(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID);
	void FlushInventoryCache(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& ContextId);
	void GetTradeHistory(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 MaxTrades, int32 StartAfterTime, const class FString& StartAfterTradeId, bool bNavigatingBack, bool bGetDescriptions, const class FString& Language, bool bIncludeFailed, bool bIncludeTotal);
	void GetTradeOffer(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& TradeOfferId, const class FString& Language);
	void GetTradeOffers(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, bool bGetSentOffers, bool bGetReceivedOffers, bool bGetDescriptions, const class FString& Language, bool bActiveOnly, bool bHistoricalOnly, int32 TimeHistoricalCutoff);
	void GetTradeOffersSummary(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 TimeLastVisit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebEconService">();
	}
	static class UWebEconService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebEconService>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetTradeHistory
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetTradeHistory final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetTradeHistory* GetTradeHistoryAsync(class UObject* WorldContextObject, const class FString& Key, int32 MaxTrades, int32 StartAfterTime, const class FString& StartAfterTradeId, bool bNavigatingBack, bool bGetDescriptions, const class FString& Language, bool bIncludeFailed, bool bIncludeTotal);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetTradeHistory">();
	}
	static class USteamCoreWebAsyncActionGetTradeHistory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetTradeHistory>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionFlushInventoryCache
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionFlushInventoryCache final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionFlushInventoryCache* FlushInventoryCacheAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& ContextId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionFlushInventoryCache">();
	}
	static class USteamCoreWebAsyncActionFlushInventoryCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionFlushInventoryCache>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionFlushAssetAppearanceCache
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionFlushAssetAppearanceCache final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionFlushAssetAppearanceCache* FlushAssetAppearanceCacheAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionFlushAssetAppearanceCache">();
	}
	static class USteamCoreWebAsyncActionFlushAssetAppearanceCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionFlushAssetAppearanceCache>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionFlushContextCache
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionFlushContextCache final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionFlushContextCache* FlushContextCacheAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionFlushContextCache">();
	}
	static class USteamCoreWebAsyncActionFlushContextCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionFlushContextCache>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetTradeOffers
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetTradeOffers final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetTradeOffers* GetTradeOffersAsync(class UObject* WorldContextObject, const class FString& Key, bool bGetSentOffers, bool bGetReceivedOffers, bool bGetDescriptions, const class FString& Language, bool bActiveOnly, bool bHistoricalOnly, int32 TimeHistoricalCutoff);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetTradeOffers">();
	}
	static class USteamCoreWebAsyncActionGetTradeOffers* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetTradeOffers>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetTradeOffer
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetTradeOffer final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetTradeOffer* GetTradeOfferAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& TradeOfferId, const class FString& Language);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetTradeOffer">();
	}
	static class USteamCoreWebAsyncActionGetTradeOffer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetTradeOffer>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetTradeOffersSummary
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetTradeOffersSummary final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetTradeOffersSummary* GetTradeOffersSummaryAsync(class UObject* WorldContextObject, const class FString& Key, int32 TimeLastVisit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetTradeOffersSummary">();
	}
	static class USteamCoreWebAsyncActionGetTradeOffersSummary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetTradeOffersSummary>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionDeclineTradeOffer
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionDeclineTradeOffer final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionDeclineTradeOffer* DeclineTradeOfferAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& TradeOfferId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionDeclineTradeOffer">();
	}
	static class USteamCoreWebAsyncActionDeclineTradeOffer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionDeclineTradeOffer>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionCancelTradeOffer
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionCancelTradeOffer final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionCancelTradeOffer* CancelTradeOfferAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& TradeOfferId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionCancelTradeOffer">();
	}
	static class USteamCoreWebAsyncActionCancelTradeOffer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionCancelTradeOffer>();
	}
};

// Class SteamCoreWeb.WebGameInventory
// 0x0000 (0x0048 - 0x0048)
class UWebGameInventory final : public USteamCoreWebSubsystem
{
public:
	void GetHistoryCommandDetails(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& Command, const class FString& ContextId, const class FString& Arguments);
	void GetUserHistory(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& ContextId, int32 StartTime, int32 EndTime);
	void HistoryExecuteCommands(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& ContextId, int32 ActorId);
	void SupportGetAssetHistory(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& AssetId, const class FString& ContextId);
	void UpdateItemDefs();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebGameInventory">();
	}
	static class UWebGameInventory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebGameInventory>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetHistoryCommandDetails
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetHistoryCommandDetails final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetHistoryCommandDetails* GetHistoryCommandDetailsAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& Command, const class FString& ContextId, const class FString& Arguments);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetHistoryCommandDetails">();
	}
	static class USteamCoreWebAsyncActionGetHistoryCommandDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetHistoryCommandDetails>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetUserHistory
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetUserHistory final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetUserHistory* GetUserHistoryAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& ContextId, int32 StartTime, int32 EndTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetUserHistory">();
	}
	static class USteamCoreWebAsyncActionGetUserHistory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetUserHistory>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionHistoryExecuteCommand
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionHistoryExecuteCommand final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionHistoryExecuteCommand* HistoryExecuteCommandAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& ContextId, int32 ActorId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionHistoryExecuteCommand">();
	}
	static class USteamCoreWebAsyncActionHistoryExecuteCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionHistoryExecuteCommand>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionSupportGetAssetHistory
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionSupportGetAssetHistory final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionSupportGetAssetHistory* SupportGetAssetHistoryAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& AssetId, const class FString& ContextId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionSupportGetAssetHistory">();
	}
	static class USteamCoreWebAsyncActionSupportGetAssetHistory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionSupportGetAssetHistory>();
	}
};

// Class SteamCoreWeb.WebGameNotificationsService
// 0x0000 (0x0048 - 0x0048)
class UWebGameNotificationsService final : public USteamCoreWebSubsystem
{
public:
	void CreateSession(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& Context, const class FString& Title, const class FString& Users, const class FString& SteamID);
	void DeleteSession(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SessionID, int32 AppID, const class FString& SteamID);
	void DeleteSessionBatch(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SessionID, int32 AppID);
	void EnumerateSessionsForApp(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, bool bIncludeAllUserMessages, bool bIncludeAuthUserMessage, const class FString& Language);
	void GetSessionDetailsForApp(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& Sessions, int32 AppID, const class FString& Language);
	void RequestNotifications(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID);
	void UpdateSession(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SessionID, int32 AppID, const class FString& Title, const class FString& Users, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebGameNotificationsService">();
	}
	static class UWebGameNotificationsService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebGameNotificationsService>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionCreateSession
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionCreateSession final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionCreateSession* CreateSessionAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& Context, const class FString& Title, const class FString& Users, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionCreateSession">();
	}
	static class USteamCoreWebAsyncActionCreateSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionCreateSession>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionUpdateSession
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionUpdateSession final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionUpdateSession* UpdateSessionAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SessionID, int32 AppID, const class FString& Title, const class FString& Users, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionUpdateSession">();
	}
	static class USteamCoreWebAsyncActionUpdateSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionUpdateSession>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionEnumerateSessionsForApp
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionEnumerateSessionsForApp final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionEnumerateSessionsForApp* EnumerateSessionsForAppAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, bool bIncludeAllUserMessages, bool bIncludeAuthUserMessage, const class FString& Language);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionEnumerateSessionsForApp">();
	}
	static class USteamCoreWebAsyncActionEnumerateSessionsForApp* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionEnumerateSessionsForApp>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetSessionDetailsForApp
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetSessionDetailsForApp final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetSessionDetailsForApp* GetSessionDetailsForAppAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& Sessions, int32 AppID, const class FString& Language);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetSessionDetailsForApp">();
	}
	static class USteamCoreWebAsyncActionGetSessionDetailsForApp* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetSessionDetailsForApp>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionRequestNotifications
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionRequestNotifications final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionRequestNotifications* RequestNotificationsAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionRequestNotifications">();
	}
	static class USteamCoreWebAsyncActionRequestNotifications* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionRequestNotifications>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionDeleteSession
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionDeleteSession final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionDeleteSession* DeleteSessionAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SessionID, int32 AppID, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionDeleteSession">();
	}
	static class USteamCoreWebAsyncActionDeleteSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionDeleteSession>();
	}
};

// Class SteamCoreWeb.WebGameServersService
// 0x0000 (0x0048 - 0x0048)
class UWebGameServersService final : public USteamCoreWebSubsystem
{
public:
	void CreateAccount(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& Memo);
	void DeleteAccount(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID);
	void GetAccountList(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key);
	void GetAccountPublicInfo(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID);
	void GetServerIPsBySteamID(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& ServerSteamId);
	void GetServerSteamIDsByIP(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& ServerIP);
	void QueryLoginToken(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& LoginToken);
	void ResetLoginToken(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID);
	void SetBanStatus(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, bool bBanned, int32 banSeconds);
	void SetMemo(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, const class FString& Memo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebGameServersService">();
	}
	static class UWebGameServersService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebGameServersService>();
	}
};

// Class SteamCoreWeb.WebInventoryService
// 0x0000 (0x0048 - 0x0048)
class UWebInventoryService final : public USteamCoreWebSubsystem
{
public:
	void AddItem(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const TArray<int32>& ItemdefId, const class FString& ItemPropsJson, const class FString& SteamID, bool bNotify, const class FString& RequestID, bool bTradeRestriction);
	void AddPromoItem(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 ItemdefId, const class FString& ItemPropsJson, const class FString& SteamID, bool bNotify, const class FString& RequestID);
	void Consolidate(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const TArray<int32>& ItemdefIDs, bool bForce);
	void ConsumeItem(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& ItemId, const class FString& Quantity, const class FString& SteamID, const class FString& RequestID);
	void ExchangeItem(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const TArray<int32>& MaterialsItemID, const TArray<int32>& MaterialsQuantity, const class FString& OutputItemdefId);
	void GetInventory(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID);
	void GetItemDefs(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& ModifiedSince, const TArray<int32>& ItemdefIDs, const TArray<int32>& WorkshopIDs, int32 CacheMaxAgeSeconds);
	void GetPriceSheet(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 Currency);
	void GetQuantity(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const TArray<int32>& ItemdefIDs, bool bForce);
	void ModifyItems(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& InputJson, const class FString& SteamID, int32 Timestamp, const class FString& Updates);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebInventoryService">();
	}
	static class UWebInventoryService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebInventoryService>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionAddItem
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionAddItem final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionAddItem* AddItemAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const TArray<int32>& ItemdefId, const class FString& ItemPropsJson, const class FString& SteamID, bool bNotify, const class FString& RequestID, bool bTradeRestriction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionAddItem">();
	}
	static class USteamCoreWebAsyncActionAddItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionAddItem>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionAddPromoItem
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionAddPromoItem final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionAddPromoItem* AddPromoItemAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, int32 ItemdefId, const class FString& ItemPropsJson, const class FString& SteamID, bool bNotify, const class FString& RequestID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionAddPromoItem">();
	}
	static class USteamCoreWebAsyncActionAddPromoItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionAddPromoItem>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionConsumeItem
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionConsumeItem final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionConsumeItem* ConsumeItemAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& ItemId, const class FString& Quantity, const class FString& SteamID, const class FString& RequestID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionConsumeItem">();
	}
	static class USteamCoreWebAsyncActionConsumeItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionConsumeItem>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetInventory
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetInventory final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetInventory* GetInventoryAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetInventory">();
	}
	static class USteamCoreWebAsyncActionGetInventory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetInventory>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetPriceSheet
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetPriceSheet final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetPriceSheet* GetPriceSheetAsync(class UObject* WorldContextObject, const class FString& Key, int32 Currency);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetPriceSheet">();
	}
	static class USteamCoreWebAsyncActionGetPriceSheet* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetPriceSheet>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionConsolidate
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionConsolidate final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionConsolidate* ConsolidateAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const TArray<int32>& ItemdefIDs, bool bForce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionConsolidate">();
	}
	static class USteamCoreWebAsyncActionConsolidate* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionConsolidate>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetQuantity
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetQuantity final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetQuantity* GetQuantityAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const TArray<int32>& ItemdefIDs, bool bForce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetQuantity">();
	}
	static class USteamCoreWebAsyncActionGetQuantity* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetQuantity>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionModifyItems
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionModifyItems final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionModifyItems* ModifyItemsAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& InputJson, const class FString& SteamID, int32 Timestamp, const class FString& Updates);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionModifyItems">();
	}
	static class USteamCoreWebAsyncActionModifyItems* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionModifyItems>();
	}
};

// Class SteamCoreWeb.WebLeaderboards
// 0x0000 (0x0048 - 0x0048)
class UWebLeaderboards final : public USteamCoreWebSubsystem
{
public:
	void DeleteLeaderboard(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& Param_Name);
	void FindOrCreateLeaderboard(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& Param_Name, const class FString& SortMethod, const class FString& DisplayType, bool bCreateIfNotFound, bool bOnlyTrustedWrites, bool bOnlyFriendsReads);
	void GetLeaderboardEntries(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 RangeStart, int32 RangeEnd, int32 LeaderboardId, int32 DataRequest, const class FString& SteamID);
	void GetLeaderboardsForGame(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID);
	void ResetLeaderboard(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 LeaderboardId);
	void SetLeaderboardScore(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 LeaderbordId, const class FString& SteamID, int32 Score, const TArray<uint8>& Details, const class FString& ScoreMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebLeaderboards">();
	}
	static class UWebLeaderboards* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebLeaderboards>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionDeleteLeaderboard
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionDeleteLeaderboard final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionDeleteLeaderboard* DeleteLeaderboardAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& Param_Name);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionDeleteLeaderboard">();
	}
	static class USteamCoreWebAsyncActionDeleteLeaderboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionDeleteLeaderboard>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionFindOrCreateLeaderboard
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionFindOrCreateLeaderboard final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionFindOrCreateLeaderboard* FindOrCreateLeaderboardAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& Param_Name, const class FString& SortMethod, const class FString& DisplayType, bool bCreateIfNotFound, bool bOnlyTrustedWrites, bool bOnlyFriendsReads);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionFindOrCreateLeaderboard">();
	}
	static class USteamCoreWebAsyncActionFindOrCreateLeaderboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionFindOrCreateLeaderboard>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetLeaderboardEntries
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetLeaderboardEntries final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetLeaderboardEntries* GetLeaderboardEntriesAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, int32 RangeStart, int32 RangeEnd, int32 LeaderboardId, int32 DataRequest, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetLeaderboardEntries">();
	}
	static class USteamCoreWebAsyncActionGetLeaderboardEntries* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetLeaderboardEntries>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetLeaderboardsForGame
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetLeaderboardsForGame final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetLeaderboardsForGame* GetLeaderboardsForGameAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetLeaderboardsForGame">();
	}
	static class USteamCoreWebAsyncActionGetLeaderboardsForGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetLeaderboardsForGame>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionResetLeaderboard
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionResetLeaderboard final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionResetLeaderboard* ResetLeaderboardAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, int32 LeaderboardId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionResetLeaderboard">();
	}
	static class USteamCoreWebAsyncActionResetLeaderboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionResetLeaderboard>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionSetLeaderboardScore
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionSetLeaderboardScore final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionSetLeaderboardScore* SetLeaderboardScoreAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, int32 LeaderboardId, const class FString& SteamID, int32 Score, const TArray<uint8>& Details, const class FString& ScoreMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionSetLeaderboardScore">();
	}
	static class USteamCoreWebAsyncActionSetLeaderboardScore* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionSetLeaderboardScore>();
	}
};

// Class SteamCoreWeb.WebLobbyMatchmakingService
// 0x0000 (0x0048 - 0x0048)
class UWebLobbyMatchmakingService final : public USteamCoreWebSubsystem
{
public:
	void CreateLobby(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 MaxMembers, ESteamCoreWebLobbyType LobbyType, const class FString& LobbyName, const class FString& InputJson, const TArray<class FString>& SteamIdInvitedMembers, const class FString& LobbyMetaData);
	void RemoveUserFromLobby(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamIdToRemove, const class FString& SteamIDLobby, const class FString& InputJson);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebLobbyMatchmakingService">();
	}
	static class UWebLobbyMatchmakingService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebLobbyMatchmakingService>();
	}
};

// Class SteamCoreWeb.WebMicroTxn
// 0x0000 (0x0048 - 0x0048)
class UWebMicroTxn final : public USteamCoreWebSubsystem
{
public:
	static class FString MakeTransactionID();

	void AdjustAgreement(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, const class FString& AgreementId, int32 AppID, const class FString& NextProcessDate);
	void CancelAgreement(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, const class FString& AgreementId, int32 AppID);
	void FinalizeTxn(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& OrderId, int32 AppID);
	void GetReport(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& Time, const class FString& Type, int32 MaxResults);
	void GetUserAgreementInfo(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID);
	void GetUserInfo(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, const class FString& IpAddress);
	void InitTxn(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& OrderId, const class FString& SteamID, int32 AppID, const class FString& Language, const class FString& Currency, const class FString& UserSession, const class FString& IpAddress, const TArray<int32>& ItemId, const TArray<int32>& Quantity, const TArray<class FString>& Amount, const TArray<class FString>& Description, const TArray<class FString>& Category, const TArray<int32>& AssociatedBundle, const TArray<class FString>& BillingType, const TArray<class FString>& StartDate, const TArray<class FString>& EndDate, const TArray<class FString>& Period, const TArray<int32>& Frequency, const TArray<class FString>& RecurringAmt, const TArray<int32>& BundleCount, const TArray<int32>& BundleId, const TArray<int32>& BundleQty, const TArray<class FString>& BundleDesc, const TArray<class FString>& BundleCategory);
	void ProcessAgreement(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& OrderId, const class FString& SteamID, const class FString& AgreementId, int32 AppID, int32 Amount, const class FString& Currency);
	void QueryTxn(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& OrderId, const class FString& TransId);
	void RefundTxn(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& OrderId, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebMicroTxn">();
	}
	static class UWebMicroTxn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebMicroTxn>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionAdjustAgreement
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionAdjustAgreement final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionAdjustAgreement* AdjustAgreementAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, const class FString& AgreementId, int32 AppID, const class FString& NextProcessDate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionAdjustAgreement">();
	}
	static class USteamCoreWebAsyncActionAdjustAgreement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionAdjustAgreement>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionCancelAgreement
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionCancelAgreement final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionCancelAgreement* CancelAgreementAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, const class FString& AgreementId, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionCancelAgreement">();
	}
	static class USteamCoreWebAsyncActionCancelAgreement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionCancelAgreement>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionFinalizeTxn
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionFinalizeTxn final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionFinalizeTxn* FinalizeTxnAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& OrderId, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionFinalizeTxn">();
	}
	static class USteamCoreWebAsyncActionFinalizeTxn* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionFinalizeTxn>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetReport
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetReport final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetReport* GetReportAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& Time, const class FString& Type, int32 MaxResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetReport">();
	}
	static class USteamCoreWebAsyncActionGetReport* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetReport>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetUserAgreementInfo
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetUserAgreementInfo final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetUserAgreementInfo* GetUserAgreementInfoAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetUserAgreementInfo">();
	}
	static class USteamCoreWebAsyncActionGetUserAgreementInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetUserAgreementInfo>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetUserInfo
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetUserInfo final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetUserInfo* GetUserInfoAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, const class FString& IpAddress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetUserInfo">();
	}
	static class USteamCoreWebAsyncActionGetUserInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetUserInfo>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionInitTxn
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionInitTxn final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionInitTxn* InitTxnAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& OrderId, const class FString& SteamID, int32 AppID, const class FString& Language, const class FString& Currency, const class FString& UserSession, const class FString& IpAddress, const TArray<int32>& ItemId, const TArray<int32>& Quantity, const TArray<class FString>& Amount, const TArray<class FString>& Description, const TArray<class FString>& Category, const TArray<int32>& AssociatedBundle, const TArray<class FString>& BillingType, const TArray<class FString>& StartDate, const TArray<class FString>& EndDate, const TArray<class FString>& Period, const TArray<int32>& Frequency, const TArray<class FString>& RecurringAmt, const TArray<int32>& BundleCount, const TArray<int32>& BundleId, const TArray<int32>& BundleQty, const TArray<class FString>& BundleDesc, const TArray<class FString>& BundleCategory);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionInitTxn">();
	}
	static class USteamCoreWebAsyncActionInitTxn* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionInitTxn>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionProcessAgreement
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionProcessAgreement final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionProcessAgreement* ProcessAgreementAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& OrderId, const class FString& SteamID, const class FString& AgreementId, int32 AppID, int32 Amount, const class FString& Currency);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionProcessAgreement">();
	}
	static class USteamCoreWebAsyncActionProcessAgreement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionProcessAgreement>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionQueryTxn
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionQueryTxn final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionQueryTxn* QueryTxnAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& OrderId, const class FString& TransId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionQueryTxn">();
	}
	static class USteamCoreWebAsyncActionQueryTxn* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionQueryTxn>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionRefundTxn
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionRefundTxn final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionRefundTxn* RefundTxnAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& OrderId, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionRefundTxn">();
	}
	static class USteamCoreWebAsyncActionRefundTxn* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionRefundTxn>();
	}
};

// Class SteamCoreWeb.WebPlayerService
// 0x0000 (0x0048 - 0x0048)
class UWebPlayerService final : public USteamCoreWebSubsystem
{
public:
	void GetBadges(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID);
	void GetCommunityBadgeProgress(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 BadgeId);
	void GetOwnedGames(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, bool bIncludeAppInfo, bool bIncludePlayedFreeGames, const TArray<int32>& Filter);
	void GetRecentlyPlayedGames(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 Count);
	void GetSteamLevel(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID);
	void IsPlayingSharedGame(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppIdPlaying);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebPlayerService">();
	}
	static class UWebPlayerService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebPlayerService>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetRecentlyPlayedGames
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetRecentlyPlayedGames final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetRecentlyPlayedGames* GetRecentlyPlayedGamesAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetRecentlyPlayedGames">();
	}
	static class USteamCoreWebAsyncActionGetRecentlyPlayedGames* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetRecentlyPlayedGames>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetOwnedGames
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetOwnedGames final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetOwnedGames* GetOwnedGamesAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, bool bIncludeAppInfo, bool bIncludePlayedFreeGames, const TArray<int32>& Filter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetOwnedGames">();
	}
	static class USteamCoreWebAsyncActionGetOwnedGames* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetOwnedGames>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetSteamLevel
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetSteamLevel final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetSteamLevel* GetSteamLevelAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetSteamLevel">();
	}
	static class USteamCoreWebAsyncActionGetSteamLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetSteamLevel>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetBadges
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetBadges final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetBadges* GetBadgesAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetBadges">();
	}
	static class USteamCoreWebAsyncActionGetBadges* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetBadges>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetCommunityBadgeProgress
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetCommunityBadgeProgress final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetCommunityBadgeProgress* GetCommunityBadgeProgressAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 BadgeId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetCommunityBadgeProgress">();
	}
	static class USteamCoreWebAsyncActionGetCommunityBadgeProgress* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetCommunityBadgeProgress>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionIsPlayingSharedGame
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionIsPlayingSharedGame final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionIsPlayingSharedGame* IsPlayingSharedGameAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppIdPlaying);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionIsPlayingSharedGame">();
	}
	static class USteamCoreWebAsyncActionIsPlayingSharedGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionIsPlayingSharedGame>();
	}
};

// Class SteamCoreWeb.WebPublishedFileService
// 0x0000 (0x0048 - 0x0048)
class UWebPublishedFileService final : public USteamCoreWebSubsystem
{
public:
	void QueryFiles(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 QueryType, int32 Page, const class FString& Cursor, int32 NumPerPage, int32 CreatorAppID, int32 AppID, const class FString& RequiredTags, const class FString& ExcludedTags, bool bMatchAllTags, const class FString& RequiredFlags, const class FString& OmittedFlags, const class FString& SearchText, int32 FileType, const class FString& ChildPublishedFileId, int32 Days, bool bIncludeRecentVotesOnly, int32 CacheMaxAgeSeconds, int32 Language, const class FString& RequiredKvTags, bool bTotalOnly, bool bIDsOnly, bool bReturnVoteData, bool bReturnTags, bool bReturnKvTags, bool bReturnPreviews, bool bReturnChildren, bool bReturnShortDescription, bool bReturnForSaleData, bool bReturnMetadata, int32 ReturnPlaytimeStats);
	void SetDeveloperMetadata(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& PublishedFileID, int32 AppID, const class FString& MetaData);
	void UpdateBanStatus(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& PublishedFileID, int32 AppID, bool bBanned, const class FString& Reason);
	void UpdateIncompatibleStatus(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& PublishedFileID, int32 AppID, bool bIncompatible);
	void UpdateTags(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& PublishedFileID, int32 AppID, const class FString& AddTags, const class FString& RemoveTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebPublishedFileService">();
	}
	static class UWebPublishedFileService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebPublishedFileService>();
	}
};

// Class SteamCoreWeb.WebSteamPublishedItemSearch
// 0x0000 (0x0048 - 0x0048)
class UWebSteamPublishedItemSearch final : public USteamCoreWebSubsystem
{
public:
	void RankedByPublicationOrder(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, int32 StartId, int32 Count, bool bHasAppAdminAccess, int32 FileType, const TArray<class FString>& Tag, const TArray<class FString>& UserTag);
	void RankedByTrend(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, int32 StartId, int32 Count, bool bHasAppAdminAccess, int32 FileType, int32 Days, const TArray<class FString>& Tag, const TArray<class FString>& UserTag);
	void RankedByVote(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, int32 StartId, int32 Count, bool bHasAppAdminAccess, int32 FileType, const TArray<class FString>& Tag, const TArray<class FString>& UserTag);
	void ResultSetSummary(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, int32 StartId, bool bHasAppAdminAccess, int32 FileType, const TArray<class FString>& Tag, const TArray<class FString>& UserTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebSteamPublishedItemSearch">();
	}
	static class UWebSteamPublishedItemSearch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebSteamPublishedItemSearch>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionRankedByPublicationOrder
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionRankedByPublicationOrder final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionRankedByPublicationOrder* RankedByPublicationOrderAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, int32 StartId, int32 Count, bool bHasAppAdminAccess, int32 FileType, const TArray<class FString>& Tag, const TArray<class FString>& UserTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionRankedByPublicationOrder">();
	}
	static class USteamCoreWebAsyncActionRankedByPublicationOrder* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionRankedByPublicationOrder>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionRankedByTrend
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionRankedByTrend final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionRankedByTrend* RankedByTrendAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, int32 StartId, int32 Count, bool bHasAppAdminAccess, int32 FileType, int32 Days, const TArray<class FString>& Tag, const TArray<class FString>& UserTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionRankedByTrend">();
	}
	static class USteamCoreWebAsyncActionRankedByTrend* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionRankedByTrend>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionRankedByVote
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionRankedByVote final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionRankedByVote* RankedByVoteAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, int32 StartId, int32 Count, bool bHasAppAdminAccess, int32 FileType, const TArray<class FString>& Tag, const TArray<class FString>& UserTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionRankedByVote">();
	}
	static class USteamCoreWebAsyncActionRankedByVote* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionRankedByVote>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionResultSetSummary
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionResultSetSummary final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionResultSetSummary* ResultSetSummaryAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, int32 StartId, bool bHasAppAdminAccess, int32 FileType, const TArray<class FString>& Tag, const TArray<class FString>& UserTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionResultSetSummary">();
	}
	static class USteamCoreWebAsyncActionResultSetSummary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionResultSetSummary>();
	}
};

// Class SteamCoreWeb.WebPublishedItemVoting
// 0x0000 (0x0048 - 0x0048)
class UWebPublishedItemVoting final : public USteamCoreWebSubsystem
{
public:
	void ItemVoteSummary(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const TArray<class FString>& PublishedFileIDs);
	void UserVoteSummary(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, const TArray<class FString>& PublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebPublishedItemVoting">();
	}
	static class UWebPublishedItemVoting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebPublishedItemVoting>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionItemVoteSummary
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionItemVoteSummary final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionItemVoteSummary* ItemVoteSummaryAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const TArray<class FString>& PublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionItemVoteSummary">();
	}
	static class USteamCoreWebAsyncActionItemVoteSummary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionItemVoteSummary>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionUserVoteSummary
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionUserVoteSummary final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionUserVoteSummary* UserVoteSummaryAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, const TArray<class FString>& PublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionUserVoteSummary">();
	}
	static class USteamCoreWebAsyncActionUserVoteSummary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionUserVoteSummary>();
	}
};

// Class SteamCoreWeb.WebRemoteStorage
// 0x0000 (0x0048 - 0x0048)
class UWebRemoteStorage final : public USteamCoreWebSubsystem
{
public:
	void EnumerateUserPublishedFiles(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID);
	void EnumerateUserSubscribedFiles(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, int32 ListType);
	void GetCollectionDetails(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const TArray<class FString>& PublishedFileIDs);
	void GetPublishedFileDetails(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& PublishedFileIDs);
	void GetUGCFileDetails(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, const class FString& UGCID, int32 AppID);
	void SetUGCUsedByGC(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, const class FString& UGCID, int32 AppID, bool bUsed);
	void SubscribePublishedFile(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& PublishedFileIDs);
	void UnsubscribePublishedFile(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& PublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebRemoteStorage">();
	}
	static class UWebRemoteStorage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebRemoteStorage>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionEnumerateUserPublishedFiles
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionEnumerateUserPublishedFiles final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionEnumerateUserPublishedFiles* EnumerateUserPublishedFilesAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionEnumerateUserPublishedFiles">();
	}
	static class USteamCoreWebAsyncActionEnumerateUserPublishedFiles* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionEnumerateUserPublishedFiles>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionEnumerateUserSubscribedFiles
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionEnumerateUserSubscribedFiles final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionEnumerateUserSubscribedFiles* EnumerateUserSubscribedFilesAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, int32 ListType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionEnumerateUserSubscribedFiles">();
	}
	static class USteamCoreWebAsyncActionEnumerateUserSubscribedFiles* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionEnumerateUserSubscribedFiles>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetCollectionDetails
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetCollectionDetails final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetCollectionDetails* GetCollectionDetailsAsync(class UObject* WorldContextObject, const TArray<class FString>& PublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetCollectionDetails">();
	}
	static class USteamCoreWebAsyncActionGetCollectionDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetCollectionDetails>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetPublishedFileDetails
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetPublishedFileDetails final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetPublishedFileDetails* GetPublishedFileDetailsAsync(class UObject* WorldContextObject, const class FString& PublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetPublishedFileDetails">();
	}
	static class USteamCoreWebAsyncActionGetPublishedFileDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetPublishedFileDetails>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetUGCFileDetails
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetUGCFileDetails final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetUGCFileDetails* GetUGCFileDetailsAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, const class FString& UGCID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetUGCFileDetails">();
	}
	static class USteamCoreWebAsyncActionGetUGCFileDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetUGCFileDetails>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionSetUGCUsedByGC
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionSetUGCUsedByGC final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionSetUGCUsedByGC* SetUGCUsedByGCAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, const class FString& UGCID, int32 AppID, bool bUsed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionSetUGCUsedByGC">();
	}
	static class USteamCoreWebAsyncActionSetUGCUsedByGC* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionSetUGCUsedByGC>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionSubscribePublishedFile
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionSubscribePublishedFile final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionSubscribePublishedFile* SubscribePublishedFileAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& PublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionSubscribePublishedFile">();
	}
	static class USteamCoreWebAsyncActionSubscribePublishedFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionSubscribePublishedFile>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionUnsubscribePublishedFile
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionUnsubscribePublishedFile final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionUnsubscribePublishedFile* UnsubscribePublishedFileAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& PublishedFileIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionUnsubscribePublishedFile">();
	}
	static class USteamCoreWebAsyncActionUnsubscribePublishedFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionUnsubscribePublishedFile>();
	}
};

// Class SteamCoreWeb.WebSteamCommunity
// 0x0000 (0x0048 - 0x0048)
class UWebSteamCommunity final : public USteamCoreWebSubsystem
{
public:
	void ReportAbuse(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamIdActor, const class FString& SteamIdTarget, int32 AppID, int32 AbuseType, int32 ContentType, const class FString& Description, const class FString& Gid);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebSteamCommunity">();
	}
	static class UWebSteamCommunity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebSteamCommunity>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionReportAbuse
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionReportAbuse final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionReportAbuse* ReportAbuseAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamIdActor, const class FString& SteamIdTarget, int32 AppID, int32 AbuseType, int32 ContentType, const class FString& Description, const class FString& Gid);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionReportAbuse">();
	}
	static class USteamCoreWebAsyncActionReportAbuse* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionReportAbuse>();
	}
};

// Class SteamCoreWeb.WebSteamEconomy
// 0x0000 (0x0048 - 0x0048)
class UWebSteamEconomy final : public USteamCoreWebSubsystem
{
public:
	void CanTrade(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& TargetId);
	void FinalizeAssetTransaction(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& TxnId, const class FString& Language);
	void GetAssetClassInfo(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& Language, int32 ClassCount, const class FString& ClassId, const class FString& InstanceId);
	void GetAssetPrices(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& Currency, const class FString& Language);
	void GetExportedAssetsForUser(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& ContextId);
	void GetMarketPrices(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID);
	void StartAssetTransaction(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& AssetId, int32 AssetQuantity, const class FString& Currency, const class FString& Language, const class FString& IpAddress, const class FString& Referer, bool bClientAuth);
	void StartTrade(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& SteamIDd, const class FString& SteamId2);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebSteamEconomy">();
	}
	static class UWebSteamEconomy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebSteamEconomy>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionCanTrade
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionCanTrade final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionCanTrade* CanTradeAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& TargetId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionCanTrade">();
	}
	static class USteamCoreWebAsyncActionCanTrade* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionCanTrade>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionFinalizeAssetTransaction
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionFinalizeAssetTransaction final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionFinalizeAssetTransaction* FinalizeAssetTransactionAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& TxnId, const class FString& Language);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionFinalizeAssetTransaction">();
	}
	static class USteamCoreWebAsyncActionFinalizeAssetTransaction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionFinalizeAssetTransaction>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetAssetClassInfo
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetAssetClassInfo final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetAssetClassInfo* GetAssetClassInfoAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& Language, int32 ClassCount, const class FString& ClassId, const class FString& InstanceId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetAssetClassInfo">();
	}
	static class USteamCoreWebAsyncActionGetAssetClassInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetAssetClassInfo>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetAssetPrices
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetAssetPrices final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetAssetPrices* GetAssetPricesAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& Currency, const class FString& Language);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetAssetPrices">();
	}
	static class USteamCoreWebAsyncActionGetAssetPrices* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetAssetPrices>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetMarketPrices
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetMarketPrices final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetMarketPrices* GetMarketPricesAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetMarketPrices">();
	}
	static class USteamCoreWebAsyncActionGetMarketPrices* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetMarketPrices>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionStartAssetTransaction
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionStartAssetTransaction final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionStartAssetTransaction* StartAssetTransactionAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamID, const class FString& AssetId, int32 AssetQuantity, const class FString& Currency, const class FString& Language, const class FString& IpAddress, const class FString& Referer, bool bClientAuth);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionStartAssetTransaction">();
	}
	static class USteamCoreWebAsyncActionStartAssetTransaction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionStartAssetTransaction>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionStartTrade
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionStartTrade final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionStartTrade* StartTradeAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& SteamId1, const class FString& SteamId2);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionStartTrade">();
	}
	static class USteamCoreWebAsyncActionStartTrade* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionStartTrade>();
	}
};

// Class SteamCoreWeb.WebSteamGameServerStats
// 0x0000 (0x0048 - 0x0048)
class UWebSteamGameServerStats final : public USteamCoreWebSubsystem
{
public:
	void GetGameServerPlayerStatsForGame(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, const class FString& GameID, int32 AppID, const class FString& RangeStart, const class FString& RangeEnd, int32 MaxResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebSteamGameServerStats">();
	}
	static class UWebSteamGameServerStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebSteamGameServerStats>();
	}
};

// Class SteamCoreWeb.WebSteamNews
// 0x0000 (0x0048 - 0x0048)
class UWebSteamNews final : public USteamCoreWebSubsystem
{
public:
	void GetNewsForApp(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, int32 AppID, int32 MaxLength, const TArray<class FString>& Feeds, int32 EndDate, int32 Count);
	void GetNewsForAppAuthed(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, int32 MaxLength, const TArray<class FString>& Feeds, int32 EndDate, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebSteamNews">();
	}
	static class UWebSteamNews* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebSteamNews>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetNewsForAppAuthed
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetNewsForAppAuthed final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetNewsForAppAuthed* GetNewsForAppAuthedAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, int32 MaxLength, const TArray<class FString>& Feeds, int32 EndDate, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetNewsForAppAuthed">();
	}
	static class USteamCoreWebAsyncActionGetNewsForAppAuthed* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetNewsForAppAuthed>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionCheckAppOwnership
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionCheckAppOwnership final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionCheckAppOwnership* CheckAppOwnershipAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionCheckAppOwnership">();
	}
	static class USteamCoreWebAsyncActionCheckAppOwnership* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionCheckAppOwnership>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetFriendList
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetFriendList final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetFriendList* GetFriendListAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, const class FString& Relationship);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetFriendList">();
	}
	static class USteamCoreWebAsyncActionGetFriendList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetFriendList>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetPlayerSummaries
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetPlayerSummaries final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetPlayerSummaries* GetPlayerSummariesAsync(class UObject* WorldContextObject, const class FString& Key, const TArray<class FString>& SteamIDs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetPlayerSummaries">();
	}
	static class USteamCoreWebAsyncActionGetPlayerSummaries* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetPlayerSummaries>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetPublisherAppOwnershipChanges final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetPublisherAppOwnershipChanges* GetPublisherAppOwnershipChangesAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& PackageRowVersion, const class FString& CDKeyRowVersion);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges">();
	}
	static class USteamCoreWebAsyncActionGetPublisherAppOwnershipChanges* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetPublisherAppOwnershipChanges>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGrantPackage
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGrantPackage final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGrantPackage* GrantPackageAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 PackageId, const class FString& IpAddress, const class FString& ThirdPartyKey, int32 ThirdPartyAppId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGrantPackage">();
	}
	static class USteamCoreWebAsyncActionGrantPackage* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGrantPackage>();
	}
};

// Class SteamCoreWeb.WebUserAuth
// 0x0000 (0x0048 - 0x0048)
class UWebUserAuth final : public USteamCoreWebSubsystem
{
public:
	void AuthenticateUser(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& SteamID, const TArray<uint8>& SessionKey, const TArray<uint8>& EncryptedLoginKey);
	void AuthenticateUserTicket(const TDelegate<void(const class FString& Data, bool bWasSuccessful)>& Callback, const class FString& Key, int32 AppID, const class FString& Ticket);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebUserAuth">();
	}
	static class UWebUserAuth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebUserAuth>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionAuthenticateUserTicket
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionAuthenticateUserTicket final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionAuthenticateUserTicket* AuthenticateUserTicketAsync(class UObject* WorldContextObject, const class FString& Key, int32 AppID, const class FString& Ticket);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionAuthenticateUserTicket">();
	}
	static class USteamCoreWebAsyncActionAuthenticateUserTicket* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionAuthenticateUserTicket>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp* GetGlobalAchievementPercentagesForAppAsync(class UObject* WorldContextObject, const class FString& GameID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp">();
	}
	static class USteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetGlobalStatsForGame
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetGlobalStatsForGame final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetGlobalStatsForGame* GetGlobalStatsForGameAsync(class UObject* WorldContextObject, int32 AppID, const TArray<class FString>& Names, int32 StartDate, int32 EndDate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetGlobalStatsForGame">();
	}
	static class USteamCoreWebAsyncActionGetGlobalStatsForGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetGlobalStatsForGame>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetNumberOfCurrentPlayers
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetNumberOfCurrentPlayers final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetNumberOfCurrentPlayers* GetNumberOfCurrentPlayersAsync(class UObject* WorldContextObject, int32 AppID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetNumberOfCurrentPlayers">();
	}
	static class USteamCoreWebAsyncActionGetNumberOfCurrentPlayers* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetNumberOfCurrentPlayers>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetPlayerAchievements
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetPlayerAchievements final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetPlayerAchievements* GetPlayerAchievementsAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& Language);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetPlayerAchievements">();
	}
	static class USteamCoreWebAsyncActionGetPlayerAchievements* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetPlayerAchievements>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionGetSchemaForGame
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionGetSchemaForGame final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionGetSchemaForGame* GetSchemaForGameAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const class FString& Language);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionGetSchemaForGame">();
	}
	static class USteamCoreWebAsyncActionGetSchemaForGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionGetSchemaForGame>();
	}
};

// Class SteamCoreWeb.SteamCoreWebAsyncActionSetUserStatsForGame
// 0x0000 (0x0058 - 0x0058)
class USteamCoreWebAsyncActionSetUserStatsForGame final : public USteamCoreWebAsyncAction
{
public:
	static class USteamCoreWebAsyncActionSetUserStatsForGame* SetUserStatsForGameAsync(class UObject* WorldContextObject, const class FString& Key, const class FString& SteamID, int32 AppID, const TArray<class FString>& Names, const TArray<int32>& Values);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamCoreWebAsyncActionSetUserStatsForGame">();
	}
	static class USteamCoreWebAsyncActionSetUserStatsForGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamCoreWebAsyncActionSetUserStatsForGame>();
	}
};

}

